// Generated by gencpp from file slam_analysis/plotFrame.msg
// DO NOT EDIT!


#ifndef SLAM_ANALYSIS_MESSAGE_PLOTFRAME_H
#define SLAM_ANALYSIS_MESSAGE_PLOTFRAME_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <front_end/Homography.h>

namespace slam_analysis
{
template <class ContainerAllocator>
struct plotFrame_
{
  typedef plotFrame_<ContainerAllocator> Type;

  plotFrame_()
    : delta()  {
    }
  plotFrame_(const ContainerAllocator& _alloc)
    : delta(_alloc)  {
  (void)_alloc;
    }



   typedef  ::front_end::Homography_<ContainerAllocator>  _delta_type;
  _delta_type delta;




  typedef boost::shared_ptr< ::slam_analysis::plotFrame_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::slam_analysis::plotFrame_<ContainerAllocator> const> ConstPtr;

}; // struct plotFrame_

typedef ::slam_analysis::plotFrame_<std::allocator<void> > plotFrame;

typedef boost::shared_ptr< ::slam_analysis::plotFrame > plotFramePtr;
typedef boost::shared_ptr< ::slam_analysis::plotFrame const> plotFrameConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::slam_analysis::plotFrame_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::slam_analysis::plotFrame_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace slam_analysis

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'slam_analysis': ['/home/ryan/git/vSLAM_Analysis/src/slam_analysis/msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'front_end': ['/home/ryan/git/vSLAM_Analysis/src/front_end/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::slam_analysis::plotFrame_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::slam_analysis::plotFrame_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::slam_analysis::plotFrame_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::slam_analysis::plotFrame_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::slam_analysis::plotFrame_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::slam_analysis::plotFrame_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::slam_analysis::plotFrame_<ContainerAllocator> >
{
  static const char* value()
  {
    return "92c2da79f439e73ded798f48cae9cb47";
  }

  static const char* value(const ::slam_analysis::plotFrame_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x92c2da79f439e73dULL;
  static const uint64_t static_value2 = 0xed798f48cae9cb47ULL;
};

template<class ContainerAllocator>
struct DataType< ::slam_analysis::plotFrame_<ContainerAllocator> >
{
  static const char* value()
  {
    return "slam_analysis/plotFrame";
  }

  static const char* value(const ::slam_analysis::plotFrame_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::slam_analysis::plotFrame_<ContainerAllocator> >
{
  static const char* value()
  {
    return "front_end/Homography delta\n\
\n\
================================================================================\n\
MSG: front_end/Homography\n\
float64[] data \n\
";
  }

  static const char* value(const ::slam_analysis::plotFrame_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::slam_analysis::plotFrame_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.delta);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct plotFrame_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::slam_analysis::plotFrame_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::slam_analysis::plotFrame_<ContainerAllocator>& v)
  {
    s << indent << "delta: ";
    s << std::endl;
    Printer< ::front_end::Homography_<ContainerAllocator> >::stream(s, indent + "  ", v.delta);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SLAM_ANALYSIS_MESSAGE_PLOTFRAME_H
