// Generated by gencpp from file viso_extractor/pMatch.msg
// DO NOT EDIT!


#ifndef VISO_EXTRACTOR_MESSAGE_PMATCH_H
#define VISO_EXTRACTOR_MESSAGE_PMATCH_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Int32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Int32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Int32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Int32.h>

namespace viso_extractor
{
template <class ContainerAllocator>
struct pMatch_
{
  typedef pMatch_<ContainerAllocator> Type;

  pMatch_()
    : u1p()
    , v1p()
    , i1p()
    , u2p()
    , v2p()
    , i2p()
    , u1c()
    , v1c()
    , i1c()
    , u2c()
    , v2c()
    , i2c()  {
    }
  pMatch_(const ContainerAllocator& _alloc)
    : u1p(_alloc)
    , v1p(_alloc)
    , i1p(_alloc)
    , u2p(_alloc)
    , v2p(_alloc)
    , i2p(_alloc)
    , u1c(_alloc)
    , v1c(_alloc)
    , i1c(_alloc)
    , u2c(_alloc)
    , v2c(_alloc)
    , i2c(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Float32_<ContainerAllocator>  _u1p_type;
  _u1p_type u1p;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _v1p_type;
  _v1p_type v1p;

   typedef  ::std_msgs::Int32_<ContainerAllocator>  _i1p_type;
  _i1p_type i1p;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _u2p_type;
  _u2p_type u2p;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _v2p_type;
  _v2p_type v2p;

   typedef  ::std_msgs::Int32_<ContainerAllocator>  _i2p_type;
  _i2p_type i2p;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _u1c_type;
  _u1c_type u1c;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _v1c_type;
  _v1c_type v1c;

   typedef  ::std_msgs::Int32_<ContainerAllocator>  _i1c_type;
  _i1c_type i1c;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _u2c_type;
  _u2c_type u2c;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _v2c_type;
  _v2c_type v2c;

   typedef  ::std_msgs::Int32_<ContainerAllocator>  _i2c_type;
  _i2c_type i2c;




  typedef boost::shared_ptr< ::viso_extractor::pMatch_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::viso_extractor::pMatch_<ContainerAllocator> const> ConstPtr;

}; // struct pMatch_

typedef ::viso_extractor::pMatch_<std::allocator<void> > pMatch;

typedef boost::shared_ptr< ::viso_extractor::pMatch > pMatchPtr;
typedef boost::shared_ptr< ::viso_extractor::pMatch const> pMatchConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::viso_extractor::pMatch_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::viso_extractor::pMatch_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace viso_extractor

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'viso_extractor': ['/home/ryan/git/vSLAM_Analysis/src/viso_extractor/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::viso_extractor::pMatch_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::viso_extractor::pMatch_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::viso_extractor::pMatch_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::viso_extractor::pMatch_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::viso_extractor::pMatch_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::viso_extractor::pMatch_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::viso_extractor::pMatch_<ContainerAllocator> >
{
  static const char* value()
  {
    return "83f4f899dee21ad25ff19f486f6fe1c6";
  }

  static const char* value(const ::viso_extractor::pMatch_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x83f4f899dee21ad2ULL;
  static const uint64_t static_value2 = 0x5ff19f486f6fe1c6ULL;
};

template<class ContainerAllocator>
struct DataType< ::viso_extractor::pMatch_<ContainerAllocator> >
{
  static const char* value()
  {
    return "viso_extractor/pMatch";
  }

  static const char* value(const ::viso_extractor::pMatch_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::viso_extractor::pMatch_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Float32 u1p\n\
std_msgs/Float32 v1p\n\
std_msgs/Int32 i1p\n\
std_msgs/Float32 u2p\n\
std_msgs/Float32 v2p\n\
std_msgs/Int32 i2p\n\
std_msgs/Float32 u1c\n\
std_msgs/Float32 v1c\n\
std_msgs/Int32 i1c\n\
std_msgs/Float32 u2c\n\
std_msgs/Float32 v2c\n\
std_msgs/Int32 i2c\n\
\n\
================================================================================\n\
MSG: std_msgs/Float32\n\
float32 data\n\
================================================================================\n\
MSG: std_msgs/Int32\n\
int32 data\n\
";
  }

  static const char* value(const ::viso_extractor::pMatch_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::viso_extractor::pMatch_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.u1p);
      stream.next(m.v1p);
      stream.next(m.i1p);
      stream.next(m.u2p);
      stream.next(m.v2p);
      stream.next(m.i2p);
      stream.next(m.u1c);
      stream.next(m.v1c);
      stream.next(m.i1c);
      stream.next(m.u2c);
      stream.next(m.v2c);
      stream.next(m.i2c);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct pMatch_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::viso_extractor::pMatch_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::viso_extractor::pMatch_<ContainerAllocator>& v)
  {
    s << indent << "u1p: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.u1p);
    s << indent << "v1p: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.v1p);
    s << indent << "i1p: ";
    s << std::endl;
    Printer< ::std_msgs::Int32_<ContainerAllocator> >::stream(s, indent + "  ", v.i1p);
    s << indent << "u2p: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.u2p);
    s << indent << "v2p: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.v2p);
    s << indent << "i2p: ";
    s << std::endl;
    Printer< ::std_msgs::Int32_<ContainerAllocator> >::stream(s, indent + "  ", v.i2p);
    s << indent << "u1c: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.u1c);
    s << indent << "v1c: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.v1c);
    s << indent << "i1c: ";
    s << std::endl;
    Printer< ::std_msgs::Int32_<ContainerAllocator> >::stream(s, indent + "  ", v.i1c);
    s << indent << "u2c: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.u2c);
    s << indent << "v2c: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.v2c);
    s << indent << "i2c: ";
    s << std::endl;
    Printer< ::std_msgs::Int32_<ContainerAllocator> >::stream(s, indent + "  ", v.i2c);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VISO_EXTRACTOR_MESSAGE_PMATCH_H
