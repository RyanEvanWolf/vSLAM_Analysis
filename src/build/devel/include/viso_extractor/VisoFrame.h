// Generated by gencpp from file viso_extractor/VisoFrame.msg
// DO NOT EDIT!


#ifndef VISO_EXTRACTOR_MESSAGE_VISOFRAME_H
#define VISO_EXTRACTOR_MESSAGE_VISOFRAME_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Int32.h>
#include <viso_extractor/pMatch.h>

namespace viso_extractor
{
template <class ContainerAllocator>
struct VisoFrame_
{
  typedef VisoFrame_<ContainerAllocator> Type;

  VisoFrame_()
    : nMatches()
    , nInliers()
    , time()
    , homography()
    , matches()
    , success(false)  {
    }
  VisoFrame_(const ContainerAllocator& _alloc)
    : nMatches(_alloc)
    , nInliers(_alloc)
    , time(_alloc)
    , homography(_alloc)
    , matches(_alloc)
    , success(false)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Float32_<ContainerAllocator>  _nMatches_type;
  _nMatches_type nMatches;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _nInliers_type;
  _nInliers_type nInliers;

   typedef  ::std_msgs::Int32_<ContainerAllocator>  _time_type;
  _time_type time;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _homography_type;
  _homography_type homography;

   typedef std::vector< ::viso_extractor::pMatch_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::viso_extractor::pMatch_<ContainerAllocator> >::other >  _matches_type;
  _matches_type matches;

   typedef uint8_t _success_type;
  _success_type success;




  typedef boost::shared_ptr< ::viso_extractor::VisoFrame_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::viso_extractor::VisoFrame_<ContainerAllocator> const> ConstPtr;

}; // struct VisoFrame_

typedef ::viso_extractor::VisoFrame_<std::allocator<void> > VisoFrame;

typedef boost::shared_ptr< ::viso_extractor::VisoFrame > VisoFramePtr;
typedef boost::shared_ptr< ::viso_extractor::VisoFrame const> VisoFrameConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::viso_extractor::VisoFrame_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::viso_extractor::VisoFrame_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace viso_extractor

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'viso_extractor': ['/home/ryan/git/vSLAM_Analysis/src/viso_extractor/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::viso_extractor::VisoFrame_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::viso_extractor::VisoFrame_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::viso_extractor::VisoFrame_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::viso_extractor::VisoFrame_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::viso_extractor::VisoFrame_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::viso_extractor::VisoFrame_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::viso_extractor::VisoFrame_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9fdd3a9666d1c582d73af55ae13305e2";
  }

  static const char* value(const ::viso_extractor::VisoFrame_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9fdd3a9666d1c582ULL;
  static const uint64_t static_value2 = 0xd73af55ae13305e2ULL;
};

template<class ContainerAllocator>
struct DataType< ::viso_extractor::VisoFrame_<ContainerAllocator> >
{
  static const char* value()
  {
    return "viso_extractor/VisoFrame";
  }

  static const char* value(const ::viso_extractor::VisoFrame_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::viso_extractor::VisoFrame_<ContainerAllocator> >
{
  static const char* value()
  {
    return " std_msgs/Float32 nMatches\n\
 std_msgs/Float32 nInliers\n\
 std_msgs/Int32 time\n\
 float64[] homography\n\
 viso_extractor/pMatch[] matches\n\
 bool success\n\
================================================================================\n\
MSG: std_msgs/Float32\n\
float32 data\n\
================================================================================\n\
MSG: std_msgs/Int32\n\
int32 data\n\
================================================================================\n\
MSG: viso_extractor/pMatch\n\
std_msgs/Float32 u1p\n\
std_msgs/Float32 v1p\n\
std_msgs/Int32 i1p\n\
std_msgs/Float32 u2p\n\
std_msgs/Float32 v2p\n\
std_msgs/Int32 i2p\n\
std_msgs/Float32 u1c\n\
std_msgs/Float32 v1c\n\
std_msgs/Int32 i1c\n\
std_msgs/Float32 u2c\n\
std_msgs/Float32 v2c\n\
std_msgs/Int32 i2c\n\
";
  }

  static const char* value(const ::viso_extractor::VisoFrame_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::viso_extractor::VisoFrame_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.nMatches);
      stream.next(m.nInliers);
      stream.next(m.time);
      stream.next(m.homography);
      stream.next(m.matches);
      stream.next(m.success);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct VisoFrame_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::viso_extractor::VisoFrame_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::viso_extractor::VisoFrame_<ContainerAllocator>& v)
  {
    s << indent << "nMatches: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.nMatches);
    s << indent << "nInliers: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.nInliers);
    s << indent << "time: ";
    s << std::endl;
    Printer< ::std_msgs::Int32_<ContainerAllocator> >::stream(s, indent + "  ", v.time);
    s << indent << "homography[]" << std::endl;
    for (size_t i = 0; i < v.homography.size(); ++i)
    {
      s << indent << "  homography[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.homography[i]);
    }
    s << indent << "matches[]" << std::endl;
    for (size_t i = 0; i < v.matches.size(); ++i)
    {
      s << indent << "  matches[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::viso_extractor::pMatch_<ContainerAllocator> >::stream(s, indent + "    ", v.matches[i]);
    }
    s << indent << "success: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.success);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VISO_EXTRACTOR_MESSAGE_VISOFRAME_H
