# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from front_end/Descriptors.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import front_end.msg
import std_msgs.msg
import sensor_msgs.msg

class Descriptors(genpy.Message):
  _md5sum = "eea05d4f348e83d7c6137f4b35cc7e3b"
  _type = "front_end/Descriptors"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """front_end/ProcTime[] proc
int32 descriptID
int32[] left_featureMask
int32[] right_featureMask
sensor_msgs/Image leftDescriptors
sensor_msgs/Image rightDescriptors

================================================================================
MSG: front_end/ProcTime
string label
float64 seconds

================================================================================
MSG: sensor_msgs/Image
# This message contains an uncompressed image
# (0, 0) is at top-left corner of image
#

Header header        # Header timestamp should be acquisition time of image
                     # Header frame_id should be optical frame of camera
                     # origin of frame should be optical center of cameara
                     # +x should point to the right in the image
                     # +y should point down in the image
                     # +z should point into to plane of the image
                     # If the frame_id here and the frame_id of the CameraInfo
                     # message associated with the image conflict
                     # the behavior is undefined

uint32 height         # image height, that is, number of rows
uint32 width          # image width, that is, number of columns

# The legal values for encoding are in file src/image_encodings.cpp
# If you want to standardize a new string format, join
# ros-users@lists.sourceforge.net and send an email proposing a new encoding.

string encoding       # Encoding of pixels -- channel meaning, ordering, size
                      # taken from the list of strings in include/sensor_msgs/image_encodings.h

uint8 is_bigendian    # is this data bigendian?
uint32 step           # Full row length in bytes
uint8[] data          # actual matrix data, size is (step * rows)

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id
"""
  __slots__ = ['proc','descriptID','left_featureMask','right_featureMask','leftDescriptors','rightDescriptors']
  _slot_types = ['front_end/ProcTime[]','int32','int32[]','int32[]','sensor_msgs/Image','sensor_msgs/Image']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       proc,descriptID,left_featureMask,right_featureMask,leftDescriptors,rightDescriptors

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Descriptors, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.proc is None:
        self.proc = []
      if self.descriptID is None:
        self.descriptID = 0
      if self.left_featureMask is None:
        self.left_featureMask = []
      if self.right_featureMask is None:
        self.right_featureMask = []
      if self.leftDescriptors is None:
        self.leftDescriptors = sensor_msgs.msg.Image()
      if self.rightDescriptors is None:
        self.rightDescriptors = sensor_msgs.msg.Image()
    else:
      self.proc = []
      self.descriptID = 0
      self.left_featureMask = []
      self.right_featureMask = []
      self.leftDescriptors = sensor_msgs.msg.Image()
      self.rightDescriptors = sensor_msgs.msg.Image()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.proc)
      buff.write(_struct_I.pack(length))
      for val1 in self.proc:
        _x = val1.label
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_get_struct_d().pack(val1.seconds))
      buff.write(_get_struct_i().pack(self.descriptID))
      length = len(self.left_featureMask)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.left_featureMask))
      length = len(self.right_featureMask)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.right_featureMask))
      _x = self
      buff.write(_get_struct_3I().pack(_x.leftDescriptors.header.seq, _x.leftDescriptors.header.stamp.secs, _x.leftDescriptors.header.stamp.nsecs))
      _x = self.leftDescriptors.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.leftDescriptors.height, _x.leftDescriptors.width))
      _x = self.leftDescriptors.encoding
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_BI().pack(_x.leftDescriptors.is_bigendian, _x.leftDescriptors.step))
      _x = self.leftDescriptors.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.rightDescriptors.header.seq, _x.rightDescriptors.header.stamp.secs, _x.rightDescriptors.header.stamp.nsecs))
      _x = self.rightDescriptors.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.rightDescriptors.height, _x.rightDescriptors.width))
      _x = self.rightDescriptors.encoding
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_BI().pack(_x.rightDescriptors.is_bigendian, _x.rightDescriptors.step))
      _x = self.rightDescriptors.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.proc is None:
        self.proc = None
      if self.leftDescriptors is None:
        self.leftDescriptors = sensor_msgs.msg.Image()
      if self.rightDescriptors is None:
        self.rightDescriptors = sensor_msgs.msg.Image()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.proc = []
      for i in range(0, length):
        val1 = front_end.msg.ProcTime()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.label = str[start:end].decode('utf-8')
        else:
          val1.label = str[start:end]
        start = end
        end += 8
        (val1.seconds,) = _get_struct_d().unpack(str[start:end])
        self.proc.append(val1)
      start = end
      end += 4
      (self.descriptID,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.left_featureMask = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.right_featureMask = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 12
      (_x.leftDescriptors.header.seq, _x.leftDescriptors.header.stamp.secs, _x.leftDescriptors.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.leftDescriptors.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.leftDescriptors.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.leftDescriptors.height, _x.leftDescriptors.width,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.leftDescriptors.encoding = str[start:end].decode('utf-8')
      else:
        self.leftDescriptors.encoding = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.leftDescriptors.is_bigendian, _x.leftDescriptors.step,) = _get_struct_BI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.leftDescriptors.data = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.rightDescriptors.header.seq, _x.rightDescriptors.header.stamp.secs, _x.rightDescriptors.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.rightDescriptors.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.rightDescriptors.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.rightDescriptors.height, _x.rightDescriptors.width,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.rightDescriptors.encoding = str[start:end].decode('utf-8')
      else:
        self.rightDescriptors.encoding = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.rightDescriptors.is_bigendian, _x.rightDescriptors.step,) = _get_struct_BI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.rightDescriptors.data = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.proc)
      buff.write(_struct_I.pack(length))
      for val1 in self.proc:
        _x = val1.label
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_get_struct_d().pack(val1.seconds))
      buff.write(_get_struct_i().pack(self.descriptID))
      length = len(self.left_featureMask)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.left_featureMask.tostring())
      length = len(self.right_featureMask)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.right_featureMask.tostring())
      _x = self
      buff.write(_get_struct_3I().pack(_x.leftDescriptors.header.seq, _x.leftDescriptors.header.stamp.secs, _x.leftDescriptors.header.stamp.nsecs))
      _x = self.leftDescriptors.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.leftDescriptors.height, _x.leftDescriptors.width))
      _x = self.leftDescriptors.encoding
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_BI().pack(_x.leftDescriptors.is_bigendian, _x.leftDescriptors.step))
      _x = self.leftDescriptors.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.rightDescriptors.header.seq, _x.rightDescriptors.header.stamp.secs, _x.rightDescriptors.header.stamp.nsecs))
      _x = self.rightDescriptors.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.rightDescriptors.height, _x.rightDescriptors.width))
      _x = self.rightDescriptors.encoding
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_BI().pack(_x.rightDescriptors.is_bigendian, _x.rightDescriptors.step))
      _x = self.rightDescriptors.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.proc is None:
        self.proc = None
      if self.leftDescriptors is None:
        self.leftDescriptors = sensor_msgs.msg.Image()
      if self.rightDescriptors is None:
        self.rightDescriptors = sensor_msgs.msg.Image()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.proc = []
      for i in range(0, length):
        val1 = front_end.msg.ProcTime()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.label = str[start:end].decode('utf-8')
        else:
          val1.label = str[start:end]
        start = end
        end += 8
        (val1.seconds,) = _get_struct_d().unpack(str[start:end])
        self.proc.append(val1)
      start = end
      end += 4
      (self.descriptID,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.left_featureMask = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.right_featureMask = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      _x = self
      start = end
      end += 12
      (_x.leftDescriptors.header.seq, _x.leftDescriptors.header.stamp.secs, _x.leftDescriptors.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.leftDescriptors.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.leftDescriptors.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.leftDescriptors.height, _x.leftDescriptors.width,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.leftDescriptors.encoding = str[start:end].decode('utf-8')
      else:
        self.leftDescriptors.encoding = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.leftDescriptors.is_bigendian, _x.leftDescriptors.step,) = _get_struct_BI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.leftDescriptors.data = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.rightDescriptors.header.seq, _x.rightDescriptors.header.stamp.secs, _x.rightDescriptors.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.rightDescriptors.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.rightDescriptors.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.rightDescriptors.height, _x.rightDescriptors.width,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.rightDescriptors.encoding = str[start:end].decode('utf-8')
      else:
        self.rightDescriptors.encoding = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.rightDescriptors.is_bigendian, _x.rightDescriptors.step,) = _get_struct_BI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.rightDescriptors.data = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_BI = None
def _get_struct_BI():
    global _struct_BI
    if _struct_BI is None:
        _struct_BI = struct.Struct("<BI")
    return _struct_BI
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
