# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from front_end/frameDetection.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import front_end.msg

class frameDetection(genpy.Message):
  _md5sum = "c89ff5835b42d14d6becea0d41610e82"
  _type = "front_end/frameDetection"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """front_end/kPoint[] leftFeatures
string detID
uint16 nLeft
float32 l_xAvg
float32 l_yAvg
float32 l_xStd
float32 l_yStd
front_end/kPoint[] rightFeatures
uint16 nRight
float32 r_xAvg
float32 r_yAvg
float32 r_xStd
float32 r_yStd
front_end/ProcTime[] processingTime 

================================================================================
MSG: front_end/kPoint
float32 x
float32 y
float32 size
float32 angle
float32 response
int32 octave
int32 class_id

================================================================================
MSG: front_end/ProcTime
string label
float64 seconds
"""
  __slots__ = ['leftFeatures','detID','nLeft','l_xAvg','l_yAvg','l_xStd','l_yStd','rightFeatures','nRight','r_xAvg','r_yAvg','r_xStd','r_yStd','processingTime']
  _slot_types = ['front_end/kPoint[]','string','uint16','float32','float32','float32','float32','front_end/kPoint[]','uint16','float32','float32','float32','float32','front_end/ProcTime[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       leftFeatures,detID,nLeft,l_xAvg,l_yAvg,l_xStd,l_yStd,rightFeatures,nRight,r_xAvg,r_yAvg,r_xStd,r_yStd,processingTime

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(frameDetection, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.leftFeatures is None:
        self.leftFeatures = []
      if self.detID is None:
        self.detID = ''
      if self.nLeft is None:
        self.nLeft = 0
      if self.l_xAvg is None:
        self.l_xAvg = 0.
      if self.l_yAvg is None:
        self.l_yAvg = 0.
      if self.l_xStd is None:
        self.l_xStd = 0.
      if self.l_yStd is None:
        self.l_yStd = 0.
      if self.rightFeatures is None:
        self.rightFeatures = []
      if self.nRight is None:
        self.nRight = 0
      if self.r_xAvg is None:
        self.r_xAvg = 0.
      if self.r_yAvg is None:
        self.r_yAvg = 0.
      if self.r_xStd is None:
        self.r_xStd = 0.
      if self.r_yStd is None:
        self.r_yStd = 0.
      if self.processingTime is None:
        self.processingTime = []
    else:
      self.leftFeatures = []
      self.detID = ''
      self.nLeft = 0
      self.l_xAvg = 0.
      self.l_yAvg = 0.
      self.l_xStd = 0.
      self.l_yStd = 0.
      self.rightFeatures = []
      self.nRight = 0
      self.r_xAvg = 0.
      self.r_yAvg = 0.
      self.r_xStd = 0.
      self.r_yStd = 0.
      self.processingTime = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.leftFeatures)
      buff.write(_struct_I.pack(length))
      for val1 in self.leftFeatures:
        _x = val1
        buff.write(_get_struct_5f2i().pack(_x.x, _x.y, _x.size, _x.angle, _x.response, _x.octave, _x.class_id))
      _x = self.detID
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_H4f().pack(_x.nLeft, _x.l_xAvg, _x.l_yAvg, _x.l_xStd, _x.l_yStd))
      length = len(self.rightFeatures)
      buff.write(_struct_I.pack(length))
      for val1 in self.rightFeatures:
        _x = val1
        buff.write(_get_struct_5f2i().pack(_x.x, _x.y, _x.size, _x.angle, _x.response, _x.octave, _x.class_id))
      _x = self
      buff.write(_get_struct_H4f().pack(_x.nRight, _x.r_xAvg, _x.r_yAvg, _x.r_xStd, _x.r_yStd))
      length = len(self.processingTime)
      buff.write(_struct_I.pack(length))
      for val1 in self.processingTime:
        _x = val1.label
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_get_struct_d().pack(val1.seconds))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.leftFeatures is None:
        self.leftFeatures = None
      if self.rightFeatures is None:
        self.rightFeatures = None
      if self.processingTime is None:
        self.processingTime = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.leftFeatures = []
      for i in range(0, length):
        val1 = front_end.msg.kPoint()
        _x = val1
        start = end
        end += 28
        (_x.x, _x.y, _x.size, _x.angle, _x.response, _x.octave, _x.class_id,) = _get_struct_5f2i().unpack(str[start:end])
        self.leftFeatures.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.detID = str[start:end].decode('utf-8')
      else:
        self.detID = str[start:end]
      _x = self
      start = end
      end += 18
      (_x.nLeft, _x.l_xAvg, _x.l_yAvg, _x.l_xStd, _x.l_yStd,) = _get_struct_H4f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.rightFeatures = []
      for i in range(0, length):
        val1 = front_end.msg.kPoint()
        _x = val1
        start = end
        end += 28
        (_x.x, _x.y, _x.size, _x.angle, _x.response, _x.octave, _x.class_id,) = _get_struct_5f2i().unpack(str[start:end])
        self.rightFeatures.append(val1)
      _x = self
      start = end
      end += 18
      (_x.nRight, _x.r_xAvg, _x.r_yAvg, _x.r_xStd, _x.r_yStd,) = _get_struct_H4f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.processingTime = []
      for i in range(0, length):
        val1 = front_end.msg.ProcTime()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.label = str[start:end].decode('utf-8')
        else:
          val1.label = str[start:end]
        start = end
        end += 8
        (val1.seconds,) = _get_struct_d().unpack(str[start:end])
        self.processingTime.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.leftFeatures)
      buff.write(_struct_I.pack(length))
      for val1 in self.leftFeatures:
        _x = val1
        buff.write(_get_struct_5f2i().pack(_x.x, _x.y, _x.size, _x.angle, _x.response, _x.octave, _x.class_id))
      _x = self.detID
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_H4f().pack(_x.nLeft, _x.l_xAvg, _x.l_yAvg, _x.l_xStd, _x.l_yStd))
      length = len(self.rightFeatures)
      buff.write(_struct_I.pack(length))
      for val1 in self.rightFeatures:
        _x = val1
        buff.write(_get_struct_5f2i().pack(_x.x, _x.y, _x.size, _x.angle, _x.response, _x.octave, _x.class_id))
      _x = self
      buff.write(_get_struct_H4f().pack(_x.nRight, _x.r_xAvg, _x.r_yAvg, _x.r_xStd, _x.r_yStd))
      length = len(self.processingTime)
      buff.write(_struct_I.pack(length))
      for val1 in self.processingTime:
        _x = val1.label
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_get_struct_d().pack(val1.seconds))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.leftFeatures is None:
        self.leftFeatures = None
      if self.rightFeatures is None:
        self.rightFeatures = None
      if self.processingTime is None:
        self.processingTime = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.leftFeatures = []
      for i in range(0, length):
        val1 = front_end.msg.kPoint()
        _x = val1
        start = end
        end += 28
        (_x.x, _x.y, _x.size, _x.angle, _x.response, _x.octave, _x.class_id,) = _get_struct_5f2i().unpack(str[start:end])
        self.leftFeatures.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.detID = str[start:end].decode('utf-8')
      else:
        self.detID = str[start:end]
      _x = self
      start = end
      end += 18
      (_x.nLeft, _x.l_xAvg, _x.l_yAvg, _x.l_xStd, _x.l_yStd,) = _get_struct_H4f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.rightFeatures = []
      for i in range(0, length):
        val1 = front_end.msg.kPoint()
        _x = val1
        start = end
        end += 28
        (_x.x, _x.y, _x.size, _x.angle, _x.response, _x.octave, _x.class_id,) = _get_struct_5f2i().unpack(str[start:end])
        self.rightFeatures.append(val1)
      _x = self
      start = end
      end += 18
      (_x.nRight, _x.r_xAvg, _x.r_yAvg, _x.r_xStd, _x.r_yStd,) = _get_struct_H4f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.processingTime = []
      for i in range(0, length):
        val1 = front_end.msg.ProcTime()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.label = str[start:end].decode('utf-8')
        else:
          val1.label = str[start:end]
        start = end
        end += 8
        (val1.seconds,) = _get_struct_d().unpack(str[start:end])
        self.processingTime.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_H4f = None
def _get_struct_H4f():
    global _struct_H4f
    if _struct_H4f is None:
        _struct_H4f = struct.Struct("<H4f")
    return _struct_H4f
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
_struct_5f2i = None
def _get_struct_5f2i():
    global _struct_5f2i
    if _struct_5f2i is None:
        _struct_5f2i = struct.Struct("<5f2i")
    return _struct_5f2i
