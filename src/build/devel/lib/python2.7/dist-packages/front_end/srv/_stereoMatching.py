# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from front_end/stereoMatchingRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import front_end.msg
import std_msgs.msg
import sensor_msgs.msg

class stereoMatchingRequest(genpy.Message):
  _md5sum = "284b7d85001d26e6bfff1aab83e09c47"
  _type = "front_end/stereoMatchingRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """front_end/stereoFeatures frame

================================================================================
MSG: front_end/stereoFeatures
string detID
string descrID
front_end/kPoint[] leftFeatures
sensor_msgs/Image leftDescr
front_end/kPoint[] rightFeatures
sensor_msgs/Image rightDescr
front_end/ProcTime[] proc
================================================================================
MSG: front_end/kPoint
float32 x
float32 y
float32 size
float32 angle
float32 response
int32 octave
int32 class_id

================================================================================
MSG: sensor_msgs/Image
# This message contains an uncompressed image
# (0, 0) is at top-left corner of image
#

Header header        # Header timestamp should be acquisition time of image
                     # Header frame_id should be optical frame of camera
                     # origin of frame should be optical center of cameara
                     # +x should point to the right in the image
                     # +y should point down in the image
                     # +z should point into to plane of the image
                     # If the frame_id here and the frame_id of the CameraInfo
                     # message associated with the image conflict
                     # the behavior is undefined

uint32 height         # image height, that is, number of rows
uint32 width          # image width, that is, number of columns

# The legal values for encoding are in file src/image_encodings.cpp
# If you want to standardize a new string format, join
# ros-users@lists.sourceforge.net and send an email proposing a new encoding.

string encoding       # Encoding of pixels -- channel meaning, ordering, size
                      # taken from the list of strings in include/sensor_msgs/image_encodings.h

uint8 is_bigendian    # is this data bigendian?
uint32 step           # Full row length in bytes
uint8[] data          # actual matrix data, size is (step * rows)

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: front_end/ProcTime
string label
float64 seconds
"""
  __slots__ = ['frame']
  _slot_types = ['front_end/stereoFeatures']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       frame

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(stereoMatchingRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.frame is None:
        self.frame = front_end.msg.stereoFeatures()
    else:
      self.frame = front_end.msg.stereoFeatures()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.frame.detID
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.frame.descrID
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.frame.leftFeatures)
      buff.write(_struct_I.pack(length))
      for val1 in self.frame.leftFeatures:
        _x = val1
        buff.write(_get_struct_5f2i().pack(_x.x, _x.y, _x.size, _x.angle, _x.response, _x.octave, _x.class_id))
      _x = self
      buff.write(_get_struct_3I().pack(_x.frame.leftDescr.header.seq, _x.frame.leftDescr.header.stamp.secs, _x.frame.leftDescr.header.stamp.nsecs))
      _x = self.frame.leftDescr.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.frame.leftDescr.height, _x.frame.leftDescr.width))
      _x = self.frame.leftDescr.encoding
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_BI().pack(_x.frame.leftDescr.is_bigendian, _x.frame.leftDescr.step))
      _x = self.frame.leftDescr.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.frame.rightFeatures)
      buff.write(_struct_I.pack(length))
      for val1 in self.frame.rightFeatures:
        _x = val1
        buff.write(_get_struct_5f2i().pack(_x.x, _x.y, _x.size, _x.angle, _x.response, _x.octave, _x.class_id))
      _x = self
      buff.write(_get_struct_3I().pack(_x.frame.rightDescr.header.seq, _x.frame.rightDescr.header.stamp.secs, _x.frame.rightDescr.header.stamp.nsecs))
      _x = self.frame.rightDescr.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.frame.rightDescr.height, _x.frame.rightDescr.width))
      _x = self.frame.rightDescr.encoding
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_BI().pack(_x.frame.rightDescr.is_bigendian, _x.frame.rightDescr.step))
      _x = self.frame.rightDescr.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.frame.proc)
      buff.write(_struct_I.pack(length))
      for val1 in self.frame.proc:
        _x = val1.label
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_get_struct_d().pack(val1.seconds))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.frame is None:
        self.frame = front_end.msg.stereoFeatures()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.frame.detID = str[start:end].decode('utf-8')
      else:
        self.frame.detID = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.frame.descrID = str[start:end].decode('utf-8')
      else:
        self.frame.descrID = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.frame.leftFeatures = []
      for i in range(0, length):
        val1 = front_end.msg.kPoint()
        _x = val1
        start = end
        end += 28
        (_x.x, _x.y, _x.size, _x.angle, _x.response, _x.octave, _x.class_id,) = _get_struct_5f2i().unpack(str[start:end])
        self.frame.leftFeatures.append(val1)
      _x = self
      start = end
      end += 12
      (_x.frame.leftDescr.header.seq, _x.frame.leftDescr.header.stamp.secs, _x.frame.leftDescr.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.frame.leftDescr.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.frame.leftDescr.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.frame.leftDescr.height, _x.frame.leftDescr.width,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.frame.leftDescr.encoding = str[start:end].decode('utf-8')
      else:
        self.frame.leftDescr.encoding = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.frame.leftDescr.is_bigendian, _x.frame.leftDescr.step,) = _get_struct_BI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.frame.leftDescr.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.frame.rightFeatures = []
      for i in range(0, length):
        val1 = front_end.msg.kPoint()
        _x = val1
        start = end
        end += 28
        (_x.x, _x.y, _x.size, _x.angle, _x.response, _x.octave, _x.class_id,) = _get_struct_5f2i().unpack(str[start:end])
        self.frame.rightFeatures.append(val1)
      _x = self
      start = end
      end += 12
      (_x.frame.rightDescr.header.seq, _x.frame.rightDescr.header.stamp.secs, _x.frame.rightDescr.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.frame.rightDescr.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.frame.rightDescr.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.frame.rightDescr.height, _x.frame.rightDescr.width,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.frame.rightDescr.encoding = str[start:end].decode('utf-8')
      else:
        self.frame.rightDescr.encoding = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.frame.rightDescr.is_bigendian, _x.frame.rightDescr.step,) = _get_struct_BI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.frame.rightDescr.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.frame.proc = []
      for i in range(0, length):
        val1 = front_end.msg.ProcTime()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.label = str[start:end].decode('utf-8')
        else:
          val1.label = str[start:end]
        start = end
        end += 8
        (val1.seconds,) = _get_struct_d().unpack(str[start:end])
        self.frame.proc.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.frame.detID
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.frame.descrID
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.frame.leftFeatures)
      buff.write(_struct_I.pack(length))
      for val1 in self.frame.leftFeatures:
        _x = val1
        buff.write(_get_struct_5f2i().pack(_x.x, _x.y, _x.size, _x.angle, _x.response, _x.octave, _x.class_id))
      _x = self
      buff.write(_get_struct_3I().pack(_x.frame.leftDescr.header.seq, _x.frame.leftDescr.header.stamp.secs, _x.frame.leftDescr.header.stamp.nsecs))
      _x = self.frame.leftDescr.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.frame.leftDescr.height, _x.frame.leftDescr.width))
      _x = self.frame.leftDescr.encoding
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_BI().pack(_x.frame.leftDescr.is_bigendian, _x.frame.leftDescr.step))
      _x = self.frame.leftDescr.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.frame.rightFeatures)
      buff.write(_struct_I.pack(length))
      for val1 in self.frame.rightFeatures:
        _x = val1
        buff.write(_get_struct_5f2i().pack(_x.x, _x.y, _x.size, _x.angle, _x.response, _x.octave, _x.class_id))
      _x = self
      buff.write(_get_struct_3I().pack(_x.frame.rightDescr.header.seq, _x.frame.rightDescr.header.stamp.secs, _x.frame.rightDescr.header.stamp.nsecs))
      _x = self.frame.rightDescr.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.frame.rightDescr.height, _x.frame.rightDescr.width))
      _x = self.frame.rightDescr.encoding
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_BI().pack(_x.frame.rightDescr.is_bigendian, _x.frame.rightDescr.step))
      _x = self.frame.rightDescr.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.frame.proc)
      buff.write(_struct_I.pack(length))
      for val1 in self.frame.proc:
        _x = val1.label
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_get_struct_d().pack(val1.seconds))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.frame is None:
        self.frame = front_end.msg.stereoFeatures()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.frame.detID = str[start:end].decode('utf-8')
      else:
        self.frame.detID = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.frame.descrID = str[start:end].decode('utf-8')
      else:
        self.frame.descrID = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.frame.leftFeatures = []
      for i in range(0, length):
        val1 = front_end.msg.kPoint()
        _x = val1
        start = end
        end += 28
        (_x.x, _x.y, _x.size, _x.angle, _x.response, _x.octave, _x.class_id,) = _get_struct_5f2i().unpack(str[start:end])
        self.frame.leftFeatures.append(val1)
      _x = self
      start = end
      end += 12
      (_x.frame.leftDescr.header.seq, _x.frame.leftDescr.header.stamp.secs, _x.frame.leftDescr.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.frame.leftDescr.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.frame.leftDescr.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.frame.leftDescr.height, _x.frame.leftDescr.width,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.frame.leftDescr.encoding = str[start:end].decode('utf-8')
      else:
        self.frame.leftDescr.encoding = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.frame.leftDescr.is_bigendian, _x.frame.leftDescr.step,) = _get_struct_BI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.frame.leftDescr.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.frame.rightFeatures = []
      for i in range(0, length):
        val1 = front_end.msg.kPoint()
        _x = val1
        start = end
        end += 28
        (_x.x, _x.y, _x.size, _x.angle, _x.response, _x.octave, _x.class_id,) = _get_struct_5f2i().unpack(str[start:end])
        self.frame.rightFeatures.append(val1)
      _x = self
      start = end
      end += 12
      (_x.frame.rightDescr.header.seq, _x.frame.rightDescr.header.stamp.secs, _x.frame.rightDescr.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.frame.rightDescr.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.frame.rightDescr.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.frame.rightDescr.height, _x.frame.rightDescr.width,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.frame.rightDescr.encoding = str[start:end].decode('utf-8')
      else:
        self.frame.rightDescr.encoding = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.frame.rightDescr.is_bigendian, _x.frame.rightDescr.step,) = _get_struct_BI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.frame.rightDescr.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.frame.proc = []
      for i in range(0, length):
        val1 = front_end.msg.ProcTime()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.label = str[start:end].decode('utf-8')
        else:
          val1.label = str[start:end]
        start = end
        end += 8
        (val1.seconds,) = _get_struct_d().unpack(str[start:end])
        self.frame.proc.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_5f2i = None
def _get_struct_5f2i():
    global _struct_5f2i
    if _struct_5f2i is None:
        _struct_5f2i = struct.Struct("<5f2i")
    return _struct_5f2i
_struct_BI = None
def _get_struct_BI():
    global _struct_BI
    if _struct_BI is None:
        _struct_BI = struct.Struct("<BI")
    return _struct_BI
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from front_end/stereoMatchingResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import front_end.msg
import std_msgs.msg
import sensor_msgs.msg

class stereoMatchingResponse(genpy.Message):
  _md5sum = "7e0e882eba151cbac932207d6080ebea"
  _type = "front_end/stereoMatchingResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """front_end/stereoLandmarks out


================================================================================
MSG: front_end/stereoLandmarks
string detID
string descrID
front_end/kPoint[] leftFeatures
sensor_msgs/Image leftDescr
front_end/kPoint[] rightFeatures
sensor_msgs/Image rightDescr
front_end/cvMatch[] matches
front_end/ProcTime[] proc

================================================================================
MSG: front_end/kPoint
float32 x
float32 y
float32 size
float32 angle
float32 response
int32 octave
int32 class_id

================================================================================
MSG: sensor_msgs/Image
# This message contains an uncompressed image
# (0, 0) is at top-left corner of image
#

Header header        # Header timestamp should be acquisition time of image
                     # Header frame_id should be optical frame of camera
                     # origin of frame should be optical center of cameara
                     # +x should point to the right in the image
                     # +y should point down in the image
                     # +z should point into to plane of the image
                     # If the frame_id here and the frame_id of the CameraInfo
                     # message associated with the image conflict
                     # the behavior is undefined

uint32 height         # image height, that is, number of rows
uint32 width          # image width, that is, number of columns

# The legal values for encoding are in file src/image_encodings.cpp
# If you want to standardize a new string format, join
# ros-users@lists.sourceforge.net and send an email proposing a new encoding.

string encoding       # Encoding of pixels -- channel meaning, ordering, size
                      # taken from the list of strings in include/sensor_msgs/image_encodings.h

uint8 is_bigendian    # is this data bigendian?
uint32 step           # Full row length in bytes
uint8[] data          # actual matrix data, size is (step * rows)

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: front_end/cvMatch
uint32 queryIdx
uint32 trainIdx
uint32 imgIdx
float32 distance

================================================================================
MSG: front_end/ProcTime
string label
float64 seconds
"""
  __slots__ = ['out']
  _slot_types = ['front_end/stereoLandmarks']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       out

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(stereoMatchingResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.out is None:
        self.out = front_end.msg.stereoLandmarks()
    else:
      self.out = front_end.msg.stereoLandmarks()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.out.detID
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.out.descrID
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.out.leftFeatures)
      buff.write(_struct_I.pack(length))
      for val1 in self.out.leftFeatures:
        _x = val1
        buff.write(_get_struct_5f2i().pack(_x.x, _x.y, _x.size, _x.angle, _x.response, _x.octave, _x.class_id))
      _x = self
      buff.write(_get_struct_3I().pack(_x.out.leftDescr.header.seq, _x.out.leftDescr.header.stamp.secs, _x.out.leftDescr.header.stamp.nsecs))
      _x = self.out.leftDescr.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.out.leftDescr.height, _x.out.leftDescr.width))
      _x = self.out.leftDescr.encoding
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_BI().pack(_x.out.leftDescr.is_bigendian, _x.out.leftDescr.step))
      _x = self.out.leftDescr.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.out.rightFeatures)
      buff.write(_struct_I.pack(length))
      for val1 in self.out.rightFeatures:
        _x = val1
        buff.write(_get_struct_5f2i().pack(_x.x, _x.y, _x.size, _x.angle, _x.response, _x.octave, _x.class_id))
      _x = self
      buff.write(_get_struct_3I().pack(_x.out.rightDescr.header.seq, _x.out.rightDescr.header.stamp.secs, _x.out.rightDescr.header.stamp.nsecs))
      _x = self.out.rightDescr.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.out.rightDescr.height, _x.out.rightDescr.width))
      _x = self.out.rightDescr.encoding
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_BI().pack(_x.out.rightDescr.is_bigendian, _x.out.rightDescr.step))
      _x = self.out.rightDescr.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.out.matches)
      buff.write(_struct_I.pack(length))
      for val1 in self.out.matches:
        _x = val1
        buff.write(_get_struct_3If().pack(_x.queryIdx, _x.trainIdx, _x.imgIdx, _x.distance))
      length = len(self.out.proc)
      buff.write(_struct_I.pack(length))
      for val1 in self.out.proc:
        _x = val1.label
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_get_struct_d().pack(val1.seconds))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.out is None:
        self.out = front_end.msg.stereoLandmarks()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.out.detID = str[start:end].decode('utf-8')
      else:
        self.out.detID = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.out.descrID = str[start:end].decode('utf-8')
      else:
        self.out.descrID = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.out.leftFeatures = []
      for i in range(0, length):
        val1 = front_end.msg.kPoint()
        _x = val1
        start = end
        end += 28
        (_x.x, _x.y, _x.size, _x.angle, _x.response, _x.octave, _x.class_id,) = _get_struct_5f2i().unpack(str[start:end])
        self.out.leftFeatures.append(val1)
      _x = self
      start = end
      end += 12
      (_x.out.leftDescr.header.seq, _x.out.leftDescr.header.stamp.secs, _x.out.leftDescr.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.out.leftDescr.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.out.leftDescr.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.out.leftDescr.height, _x.out.leftDescr.width,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.out.leftDescr.encoding = str[start:end].decode('utf-8')
      else:
        self.out.leftDescr.encoding = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.out.leftDescr.is_bigendian, _x.out.leftDescr.step,) = _get_struct_BI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.out.leftDescr.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.out.rightFeatures = []
      for i in range(0, length):
        val1 = front_end.msg.kPoint()
        _x = val1
        start = end
        end += 28
        (_x.x, _x.y, _x.size, _x.angle, _x.response, _x.octave, _x.class_id,) = _get_struct_5f2i().unpack(str[start:end])
        self.out.rightFeatures.append(val1)
      _x = self
      start = end
      end += 12
      (_x.out.rightDescr.header.seq, _x.out.rightDescr.header.stamp.secs, _x.out.rightDescr.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.out.rightDescr.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.out.rightDescr.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.out.rightDescr.height, _x.out.rightDescr.width,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.out.rightDescr.encoding = str[start:end].decode('utf-8')
      else:
        self.out.rightDescr.encoding = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.out.rightDescr.is_bigendian, _x.out.rightDescr.step,) = _get_struct_BI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.out.rightDescr.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.out.matches = []
      for i in range(0, length):
        val1 = front_end.msg.cvMatch()
        _x = val1
        start = end
        end += 16
        (_x.queryIdx, _x.trainIdx, _x.imgIdx, _x.distance,) = _get_struct_3If().unpack(str[start:end])
        self.out.matches.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.out.proc = []
      for i in range(0, length):
        val1 = front_end.msg.ProcTime()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.label = str[start:end].decode('utf-8')
        else:
          val1.label = str[start:end]
        start = end
        end += 8
        (val1.seconds,) = _get_struct_d().unpack(str[start:end])
        self.out.proc.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.out.detID
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.out.descrID
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.out.leftFeatures)
      buff.write(_struct_I.pack(length))
      for val1 in self.out.leftFeatures:
        _x = val1
        buff.write(_get_struct_5f2i().pack(_x.x, _x.y, _x.size, _x.angle, _x.response, _x.octave, _x.class_id))
      _x = self
      buff.write(_get_struct_3I().pack(_x.out.leftDescr.header.seq, _x.out.leftDescr.header.stamp.secs, _x.out.leftDescr.header.stamp.nsecs))
      _x = self.out.leftDescr.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.out.leftDescr.height, _x.out.leftDescr.width))
      _x = self.out.leftDescr.encoding
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_BI().pack(_x.out.leftDescr.is_bigendian, _x.out.leftDescr.step))
      _x = self.out.leftDescr.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.out.rightFeatures)
      buff.write(_struct_I.pack(length))
      for val1 in self.out.rightFeatures:
        _x = val1
        buff.write(_get_struct_5f2i().pack(_x.x, _x.y, _x.size, _x.angle, _x.response, _x.octave, _x.class_id))
      _x = self
      buff.write(_get_struct_3I().pack(_x.out.rightDescr.header.seq, _x.out.rightDescr.header.stamp.secs, _x.out.rightDescr.header.stamp.nsecs))
      _x = self.out.rightDescr.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.out.rightDescr.height, _x.out.rightDescr.width))
      _x = self.out.rightDescr.encoding
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_BI().pack(_x.out.rightDescr.is_bigendian, _x.out.rightDescr.step))
      _x = self.out.rightDescr.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.out.matches)
      buff.write(_struct_I.pack(length))
      for val1 in self.out.matches:
        _x = val1
        buff.write(_get_struct_3If().pack(_x.queryIdx, _x.trainIdx, _x.imgIdx, _x.distance))
      length = len(self.out.proc)
      buff.write(_struct_I.pack(length))
      for val1 in self.out.proc:
        _x = val1.label
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_get_struct_d().pack(val1.seconds))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.out is None:
        self.out = front_end.msg.stereoLandmarks()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.out.detID = str[start:end].decode('utf-8')
      else:
        self.out.detID = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.out.descrID = str[start:end].decode('utf-8')
      else:
        self.out.descrID = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.out.leftFeatures = []
      for i in range(0, length):
        val1 = front_end.msg.kPoint()
        _x = val1
        start = end
        end += 28
        (_x.x, _x.y, _x.size, _x.angle, _x.response, _x.octave, _x.class_id,) = _get_struct_5f2i().unpack(str[start:end])
        self.out.leftFeatures.append(val1)
      _x = self
      start = end
      end += 12
      (_x.out.leftDescr.header.seq, _x.out.leftDescr.header.stamp.secs, _x.out.leftDescr.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.out.leftDescr.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.out.leftDescr.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.out.leftDescr.height, _x.out.leftDescr.width,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.out.leftDescr.encoding = str[start:end].decode('utf-8')
      else:
        self.out.leftDescr.encoding = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.out.leftDescr.is_bigendian, _x.out.leftDescr.step,) = _get_struct_BI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.out.leftDescr.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.out.rightFeatures = []
      for i in range(0, length):
        val1 = front_end.msg.kPoint()
        _x = val1
        start = end
        end += 28
        (_x.x, _x.y, _x.size, _x.angle, _x.response, _x.octave, _x.class_id,) = _get_struct_5f2i().unpack(str[start:end])
        self.out.rightFeatures.append(val1)
      _x = self
      start = end
      end += 12
      (_x.out.rightDescr.header.seq, _x.out.rightDescr.header.stamp.secs, _x.out.rightDescr.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.out.rightDescr.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.out.rightDescr.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.out.rightDescr.height, _x.out.rightDescr.width,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.out.rightDescr.encoding = str[start:end].decode('utf-8')
      else:
        self.out.rightDescr.encoding = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.out.rightDescr.is_bigendian, _x.out.rightDescr.step,) = _get_struct_BI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.out.rightDescr.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.out.matches = []
      for i in range(0, length):
        val1 = front_end.msg.cvMatch()
        _x = val1
        start = end
        end += 16
        (_x.queryIdx, _x.trainIdx, _x.imgIdx, _x.distance,) = _get_struct_3If().unpack(str[start:end])
        self.out.matches.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.out.proc = []
      for i in range(0, length):
        val1 = front_end.msg.ProcTime()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.label = str[start:end].decode('utf-8')
        else:
          val1.label = str[start:end]
        start = end
        end += 8
        (val1.seconds,) = _get_struct_d().unpack(str[start:end])
        self.out.proc.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
_struct_5f2i = None
def _get_struct_5f2i():
    global _struct_5f2i
    if _struct_5f2i is None:
        _struct_5f2i = struct.Struct("<5f2i")
    return _struct_5f2i
_struct_BI = None
def _get_struct_BI():
    global _struct_BI
    if _struct_BI is None:
        _struct_BI = struct.Struct("<BI")
    return _struct_BI
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3If = None
def _get_struct_3If():
    global _struct_3If
    if _struct_3If is None:
        _struct_3If = struct.Struct("<3If")
    return _struct_3If
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
class stereoMatching(object):
  _type          = 'front_end/stereoMatching'
  _md5sum = '75348319ccc3f979d087d64d783a5ddc'
  _request_class  = stereoMatchingRequest
  _response_class = stereoMatchingResponse
