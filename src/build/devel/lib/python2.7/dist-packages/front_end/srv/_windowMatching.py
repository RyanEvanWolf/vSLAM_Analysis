# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from front_end/windowMatchingRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import front_end.msg
import std_msgs.msg
import sensor_msgs.msg

class windowMatchingRequest(genpy.Message):
  _md5sum = "ea7ad8af56c7f2fc4a46baca98c4a443"
  _type = "front_end/windowMatchingRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool reset
front_end/stereoLandmarks latestFrame

================================================================================
MSG: front_end/stereoLandmarks
string detID
string descrID
front_end/kPoint[] leftFeatures
sensor_msgs/Image leftDescr
front_end/kPoint[] rightFeatures
sensor_msgs/Image rightDescr
front_end/cvMatch[] matches
front_end/ProcTime[] proc

================================================================================
MSG: front_end/kPoint
float32 x
float32 y
float32 size
float32 angle
float32 response
int32 octave
int32 class_id

================================================================================
MSG: sensor_msgs/Image
# This message contains an uncompressed image
# (0, 0) is at top-left corner of image
#

Header header        # Header timestamp should be acquisition time of image
                     # Header frame_id should be optical frame of camera
                     # origin of frame should be optical center of cameara
                     # +x should point to the right in the image
                     # +y should point down in the image
                     # +z should point into to plane of the image
                     # If the frame_id here and the frame_id of the CameraInfo
                     # message associated with the image conflict
                     # the behavior is undefined

uint32 height         # image height, that is, number of rows
uint32 width          # image width, that is, number of columns

# The legal values for encoding are in file src/image_encodings.cpp
# If you want to standardize a new string format, join
# ros-users@lists.sourceforge.net and send an email proposing a new encoding.

string encoding       # Encoding of pixels -- channel meaning, ordering, size
                      # taken from the list of strings in include/sensor_msgs/image_encodings.h

uint8 is_bigendian    # is this data bigendian?
uint32 step           # Full row length in bytes
uint8[] data          # actual matrix data, size is (step * rows)

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: front_end/cvMatch
uint32 queryIdx
uint32 trainIdx
uint32 imgIdx
float32 distance

================================================================================
MSG: front_end/ProcTime
string label
float64 seconds
"""
  __slots__ = ['reset','latestFrame']
  _slot_types = ['bool','front_end/stereoLandmarks']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       reset,latestFrame

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(windowMatchingRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.reset is None:
        self.reset = False
      if self.latestFrame is None:
        self.latestFrame = front_end.msg.stereoLandmarks()
    else:
      self.reset = False
      self.latestFrame = front_end.msg.stereoLandmarks()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_B().pack(self.reset))
      _x = self.latestFrame.detID
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.latestFrame.descrID
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.latestFrame.leftFeatures)
      buff.write(_struct_I.pack(length))
      for val1 in self.latestFrame.leftFeatures:
        _x = val1
        buff.write(_get_struct_5f2i().pack(_x.x, _x.y, _x.size, _x.angle, _x.response, _x.octave, _x.class_id))
      _x = self
      buff.write(_get_struct_3I().pack(_x.latestFrame.leftDescr.header.seq, _x.latestFrame.leftDescr.header.stamp.secs, _x.latestFrame.leftDescr.header.stamp.nsecs))
      _x = self.latestFrame.leftDescr.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.latestFrame.leftDescr.height, _x.latestFrame.leftDescr.width))
      _x = self.latestFrame.leftDescr.encoding
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_BI().pack(_x.latestFrame.leftDescr.is_bigendian, _x.latestFrame.leftDescr.step))
      _x = self.latestFrame.leftDescr.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.latestFrame.rightFeatures)
      buff.write(_struct_I.pack(length))
      for val1 in self.latestFrame.rightFeatures:
        _x = val1
        buff.write(_get_struct_5f2i().pack(_x.x, _x.y, _x.size, _x.angle, _x.response, _x.octave, _x.class_id))
      _x = self
      buff.write(_get_struct_3I().pack(_x.latestFrame.rightDescr.header.seq, _x.latestFrame.rightDescr.header.stamp.secs, _x.latestFrame.rightDescr.header.stamp.nsecs))
      _x = self.latestFrame.rightDescr.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.latestFrame.rightDescr.height, _x.latestFrame.rightDescr.width))
      _x = self.latestFrame.rightDescr.encoding
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_BI().pack(_x.latestFrame.rightDescr.is_bigendian, _x.latestFrame.rightDescr.step))
      _x = self.latestFrame.rightDescr.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.latestFrame.matches)
      buff.write(_struct_I.pack(length))
      for val1 in self.latestFrame.matches:
        _x = val1
        buff.write(_get_struct_3If().pack(_x.queryIdx, _x.trainIdx, _x.imgIdx, _x.distance))
      length = len(self.latestFrame.proc)
      buff.write(_struct_I.pack(length))
      for val1 in self.latestFrame.proc:
        _x = val1.label
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_get_struct_d().pack(val1.seconds))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.latestFrame is None:
        self.latestFrame = front_end.msg.stereoLandmarks()
      end = 0
      start = end
      end += 1
      (self.reset,) = _get_struct_B().unpack(str[start:end])
      self.reset = bool(self.reset)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.latestFrame.detID = str[start:end].decode('utf-8')
      else:
        self.latestFrame.detID = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.latestFrame.descrID = str[start:end].decode('utf-8')
      else:
        self.latestFrame.descrID = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.latestFrame.leftFeatures = []
      for i in range(0, length):
        val1 = front_end.msg.kPoint()
        _x = val1
        start = end
        end += 28
        (_x.x, _x.y, _x.size, _x.angle, _x.response, _x.octave, _x.class_id,) = _get_struct_5f2i().unpack(str[start:end])
        self.latestFrame.leftFeatures.append(val1)
      _x = self
      start = end
      end += 12
      (_x.latestFrame.leftDescr.header.seq, _x.latestFrame.leftDescr.header.stamp.secs, _x.latestFrame.leftDescr.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.latestFrame.leftDescr.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.latestFrame.leftDescr.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.latestFrame.leftDescr.height, _x.latestFrame.leftDescr.width,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.latestFrame.leftDescr.encoding = str[start:end].decode('utf-8')
      else:
        self.latestFrame.leftDescr.encoding = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.latestFrame.leftDescr.is_bigendian, _x.latestFrame.leftDescr.step,) = _get_struct_BI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.latestFrame.leftDescr.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.latestFrame.rightFeatures = []
      for i in range(0, length):
        val1 = front_end.msg.kPoint()
        _x = val1
        start = end
        end += 28
        (_x.x, _x.y, _x.size, _x.angle, _x.response, _x.octave, _x.class_id,) = _get_struct_5f2i().unpack(str[start:end])
        self.latestFrame.rightFeatures.append(val1)
      _x = self
      start = end
      end += 12
      (_x.latestFrame.rightDescr.header.seq, _x.latestFrame.rightDescr.header.stamp.secs, _x.latestFrame.rightDescr.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.latestFrame.rightDescr.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.latestFrame.rightDescr.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.latestFrame.rightDescr.height, _x.latestFrame.rightDescr.width,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.latestFrame.rightDescr.encoding = str[start:end].decode('utf-8')
      else:
        self.latestFrame.rightDescr.encoding = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.latestFrame.rightDescr.is_bigendian, _x.latestFrame.rightDescr.step,) = _get_struct_BI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.latestFrame.rightDescr.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.latestFrame.matches = []
      for i in range(0, length):
        val1 = front_end.msg.cvMatch()
        _x = val1
        start = end
        end += 16
        (_x.queryIdx, _x.trainIdx, _x.imgIdx, _x.distance,) = _get_struct_3If().unpack(str[start:end])
        self.latestFrame.matches.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.latestFrame.proc = []
      for i in range(0, length):
        val1 = front_end.msg.ProcTime()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.label = str[start:end].decode('utf-8')
        else:
          val1.label = str[start:end]
        start = end
        end += 8
        (val1.seconds,) = _get_struct_d().unpack(str[start:end])
        self.latestFrame.proc.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_get_struct_B().pack(self.reset))
      _x = self.latestFrame.detID
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.latestFrame.descrID
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.latestFrame.leftFeatures)
      buff.write(_struct_I.pack(length))
      for val1 in self.latestFrame.leftFeatures:
        _x = val1
        buff.write(_get_struct_5f2i().pack(_x.x, _x.y, _x.size, _x.angle, _x.response, _x.octave, _x.class_id))
      _x = self
      buff.write(_get_struct_3I().pack(_x.latestFrame.leftDescr.header.seq, _x.latestFrame.leftDescr.header.stamp.secs, _x.latestFrame.leftDescr.header.stamp.nsecs))
      _x = self.latestFrame.leftDescr.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.latestFrame.leftDescr.height, _x.latestFrame.leftDescr.width))
      _x = self.latestFrame.leftDescr.encoding
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_BI().pack(_x.latestFrame.leftDescr.is_bigendian, _x.latestFrame.leftDescr.step))
      _x = self.latestFrame.leftDescr.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.latestFrame.rightFeatures)
      buff.write(_struct_I.pack(length))
      for val1 in self.latestFrame.rightFeatures:
        _x = val1
        buff.write(_get_struct_5f2i().pack(_x.x, _x.y, _x.size, _x.angle, _x.response, _x.octave, _x.class_id))
      _x = self
      buff.write(_get_struct_3I().pack(_x.latestFrame.rightDescr.header.seq, _x.latestFrame.rightDescr.header.stamp.secs, _x.latestFrame.rightDescr.header.stamp.nsecs))
      _x = self.latestFrame.rightDescr.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.latestFrame.rightDescr.height, _x.latestFrame.rightDescr.width))
      _x = self.latestFrame.rightDescr.encoding
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_BI().pack(_x.latestFrame.rightDescr.is_bigendian, _x.latestFrame.rightDescr.step))
      _x = self.latestFrame.rightDescr.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.latestFrame.matches)
      buff.write(_struct_I.pack(length))
      for val1 in self.latestFrame.matches:
        _x = val1
        buff.write(_get_struct_3If().pack(_x.queryIdx, _x.trainIdx, _x.imgIdx, _x.distance))
      length = len(self.latestFrame.proc)
      buff.write(_struct_I.pack(length))
      for val1 in self.latestFrame.proc:
        _x = val1.label
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_get_struct_d().pack(val1.seconds))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.latestFrame is None:
        self.latestFrame = front_end.msg.stereoLandmarks()
      end = 0
      start = end
      end += 1
      (self.reset,) = _get_struct_B().unpack(str[start:end])
      self.reset = bool(self.reset)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.latestFrame.detID = str[start:end].decode('utf-8')
      else:
        self.latestFrame.detID = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.latestFrame.descrID = str[start:end].decode('utf-8')
      else:
        self.latestFrame.descrID = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.latestFrame.leftFeatures = []
      for i in range(0, length):
        val1 = front_end.msg.kPoint()
        _x = val1
        start = end
        end += 28
        (_x.x, _x.y, _x.size, _x.angle, _x.response, _x.octave, _x.class_id,) = _get_struct_5f2i().unpack(str[start:end])
        self.latestFrame.leftFeatures.append(val1)
      _x = self
      start = end
      end += 12
      (_x.latestFrame.leftDescr.header.seq, _x.latestFrame.leftDescr.header.stamp.secs, _x.latestFrame.leftDescr.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.latestFrame.leftDescr.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.latestFrame.leftDescr.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.latestFrame.leftDescr.height, _x.latestFrame.leftDescr.width,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.latestFrame.leftDescr.encoding = str[start:end].decode('utf-8')
      else:
        self.latestFrame.leftDescr.encoding = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.latestFrame.leftDescr.is_bigendian, _x.latestFrame.leftDescr.step,) = _get_struct_BI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.latestFrame.leftDescr.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.latestFrame.rightFeatures = []
      for i in range(0, length):
        val1 = front_end.msg.kPoint()
        _x = val1
        start = end
        end += 28
        (_x.x, _x.y, _x.size, _x.angle, _x.response, _x.octave, _x.class_id,) = _get_struct_5f2i().unpack(str[start:end])
        self.latestFrame.rightFeatures.append(val1)
      _x = self
      start = end
      end += 12
      (_x.latestFrame.rightDescr.header.seq, _x.latestFrame.rightDescr.header.stamp.secs, _x.latestFrame.rightDescr.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.latestFrame.rightDescr.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.latestFrame.rightDescr.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.latestFrame.rightDescr.height, _x.latestFrame.rightDescr.width,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.latestFrame.rightDescr.encoding = str[start:end].decode('utf-8')
      else:
        self.latestFrame.rightDescr.encoding = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.latestFrame.rightDescr.is_bigendian, _x.latestFrame.rightDescr.step,) = _get_struct_BI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.latestFrame.rightDescr.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.latestFrame.matches = []
      for i in range(0, length):
        val1 = front_end.msg.cvMatch()
        _x = val1
        start = end
        end += 16
        (_x.queryIdx, _x.trainIdx, _x.imgIdx, _x.distance,) = _get_struct_3If().unpack(str[start:end])
        self.latestFrame.matches.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.latestFrame.proc = []
      for i in range(0, length):
        val1 = front_end.msg.ProcTime()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.label = str[start:end].decode('utf-8')
        else:
          val1.label = str[start:end]
        start = end
        end += 8
        (val1.seconds,) = _get_struct_d().unpack(str[start:end])
        self.latestFrame.proc.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
_struct_5f2i = None
def _get_struct_5f2i():
    global _struct_5f2i
    if _struct_5f2i is None:
        _struct_5f2i = struct.Struct("<5f2i")
    return _struct_5f2i
_struct_BI = None
def _get_struct_BI():
    global _struct_BI
    if _struct_BI is None:
        _struct_BI = struct.Struct("<BI")
    return _struct_BI
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3If = None
def _get_struct_3If():
    global _struct_3If
    if _struct_3If is None:
        _struct_3If = struct.Struct("<3If")
    return _struct_3If
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from front_end/windowMatchingResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import front_end.msg
import std_msgs.msg
import sensor_msgs.msg

class windowMatchingResponse(genpy.Message):
  _md5sum = "7a3b7ef516a579e47bacc951e8b57dfe"
  _type = "front_end/windowMatchingResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """front_end/windowStatus state


================================================================================
MSG: front_end/windowStatus
front_end/stereoLandmarks[] msgs
front_end/interFrameTracks[] tracks
sensor_msgs/Image[] motion

================================================================================
MSG: front_end/stereoLandmarks
string detID
string descrID
front_end/kPoint[] leftFeatures
sensor_msgs/Image leftDescr
front_end/kPoint[] rightFeatures
sensor_msgs/Image rightDescr
front_end/cvMatch[] matches
front_end/ProcTime[] proc

================================================================================
MSG: front_end/kPoint
float32 x
float32 y
float32 size
float32 angle
float32 response
int32 octave
int32 class_id

================================================================================
MSG: sensor_msgs/Image
# This message contains an uncompressed image
# (0, 0) is at top-left corner of image
#

Header header        # Header timestamp should be acquisition time of image
                     # Header frame_id should be optical frame of camera
                     # origin of frame should be optical center of cameara
                     # +x should point to the right in the image
                     # +y should point down in the image
                     # +z should point into to plane of the image
                     # If the frame_id here and the frame_id of the CameraInfo
                     # message associated with the image conflict
                     # the behavior is undefined

uint32 height         # image height, that is, number of rows
uint32 width          # image width, that is, number of columns

# The legal values for encoding are in file src/image_encodings.cpp
# If you want to standardize a new string format, join
# ros-users@lists.sourceforge.net and send an email proposing a new encoding.

string encoding       # Encoding of pixels -- channel meaning, ordering, size
                      # taken from the list of strings in include/sensor_msgs/image_encodings.h

uint8 is_bigendian    # is this data bigendian?
uint32 step           # Full row length in bytes
uint8[] data          # actual matrix data, size is (step * rows)

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: front_end/cvMatch
uint32 queryIdx
uint32 trainIdx
uint32 imgIdx
float32 distance

================================================================================
MSG: front_end/ProcTime
string label
float64 seconds

================================================================================
MSG: front_end/interFrameTracks
front_end/cvMatch[] tracks 
sensor_msgs/Image motionInliers"""
  __slots__ = ['state']
  _slot_types = ['front_end/windowStatus']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       state

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(windowMatchingResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.state is None:
        self.state = front_end.msg.windowStatus()
    else:
      self.state = front_end.msg.windowStatus()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.state.msgs)
      buff.write(_struct_I.pack(length))
      for val1 in self.state.msgs:
        _x = val1.detID
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.descrID
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(val1.leftFeatures)
        buff.write(_struct_I.pack(length))
        for val2 in val1.leftFeatures:
          _x = val2
          buff.write(_get_struct_5f2i().pack(_x.x, _x.y, _x.size, _x.angle, _x.response, _x.octave, _x.class_id))
        _v1 = val1.leftDescr
        _v2 = _v1.header
        buff.write(_get_struct_I().pack(_v2.seq))
        _v3 = _v2.stamp
        _x = _v3
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v2.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = _v1
        buff.write(_get_struct_2I().pack(_x.height, _x.width))
        _x = _v1.encoding
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = _v1
        buff.write(_get_struct_BI().pack(_x.is_bigendian, _x.step))
        _x = _v1.data
        length = len(_x)
        # - if encoded as a list instead, serialize as bytes instead of string
        if type(_x) in [list, tuple]:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(val1.rightFeatures)
        buff.write(_struct_I.pack(length))
        for val2 in val1.rightFeatures:
          _x = val2
          buff.write(_get_struct_5f2i().pack(_x.x, _x.y, _x.size, _x.angle, _x.response, _x.octave, _x.class_id))
        _v4 = val1.rightDescr
        _v5 = _v4.header
        buff.write(_get_struct_I().pack(_v5.seq))
        _v6 = _v5.stamp
        _x = _v6
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v5.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = _v4
        buff.write(_get_struct_2I().pack(_x.height, _x.width))
        _x = _v4.encoding
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = _v4
        buff.write(_get_struct_BI().pack(_x.is_bigendian, _x.step))
        _x = _v4.data
        length = len(_x)
        # - if encoded as a list instead, serialize as bytes instead of string
        if type(_x) in [list, tuple]:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(val1.matches)
        buff.write(_struct_I.pack(length))
        for val2 in val1.matches:
          _x = val2
          buff.write(_get_struct_3If().pack(_x.queryIdx, _x.trainIdx, _x.imgIdx, _x.distance))
        length = len(val1.proc)
        buff.write(_struct_I.pack(length))
        for val2 in val1.proc:
          _x = val2.label
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          buff.write(_get_struct_d().pack(val2.seconds))
      length = len(self.state.tracks)
      buff.write(_struct_I.pack(length))
      for val1 in self.state.tracks:
        length = len(val1.tracks)
        buff.write(_struct_I.pack(length))
        for val2 in val1.tracks:
          _x = val2
          buff.write(_get_struct_3If().pack(_x.queryIdx, _x.trainIdx, _x.imgIdx, _x.distance))
        _v7 = val1.motionInliers
        _v8 = _v7.header
        buff.write(_get_struct_I().pack(_v8.seq))
        _v9 = _v8.stamp
        _x = _v9
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v8.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = _v7
        buff.write(_get_struct_2I().pack(_x.height, _x.width))
        _x = _v7.encoding
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = _v7
        buff.write(_get_struct_BI().pack(_x.is_bigendian, _x.step))
        _x = _v7.data
        length = len(_x)
        # - if encoded as a list instead, serialize as bytes instead of string
        if type(_x) in [list, tuple]:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.state.motion)
      buff.write(_struct_I.pack(length))
      for val1 in self.state.motion:
        _v10 = val1.header
        buff.write(_get_struct_I().pack(_v10.seq))
        _v11 = _v10.stamp
        _x = _v11
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v10.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_get_struct_2I().pack(_x.height, _x.width))
        _x = val1.encoding
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_get_struct_BI().pack(_x.is_bigendian, _x.step))
        _x = val1.data
        length = len(_x)
        # - if encoded as a list instead, serialize as bytes instead of string
        if type(_x) in [list, tuple]:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.state is None:
        self.state = front_end.msg.windowStatus()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.state.msgs = []
      for i in range(0, length):
        val1 = front_end.msg.stereoLandmarks()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.detID = str[start:end].decode('utf-8')
        else:
          val1.detID = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.descrID = str[start:end].decode('utf-8')
        else:
          val1.descrID = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.leftFeatures = []
        for i in range(0, length):
          val2 = front_end.msg.kPoint()
          _x = val2
          start = end
          end += 28
          (_x.x, _x.y, _x.size, _x.angle, _x.response, _x.octave, _x.class_id,) = _get_struct_5f2i().unpack(str[start:end])
          val1.leftFeatures.append(val2)
        _v12 = val1.leftDescr
        _v13 = _v12.header
        start = end
        end += 4
        (_v13.seq,) = _get_struct_I().unpack(str[start:end])
        _v14 = _v13.stamp
        _x = _v14
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v13.frame_id = str[start:end].decode('utf-8')
        else:
          _v13.frame_id = str[start:end]
        _x = _v12
        start = end
        end += 8
        (_x.height, _x.width,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v12.encoding = str[start:end].decode('utf-8')
        else:
          _v12.encoding = str[start:end]
        _x = _v12
        start = end
        end += 5
        (_x.is_bigendian, _x.step,) = _get_struct_BI().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        _v12.data = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.rightFeatures = []
        for i in range(0, length):
          val2 = front_end.msg.kPoint()
          _x = val2
          start = end
          end += 28
          (_x.x, _x.y, _x.size, _x.angle, _x.response, _x.octave, _x.class_id,) = _get_struct_5f2i().unpack(str[start:end])
          val1.rightFeatures.append(val2)
        _v15 = val1.rightDescr
        _v16 = _v15.header
        start = end
        end += 4
        (_v16.seq,) = _get_struct_I().unpack(str[start:end])
        _v17 = _v16.stamp
        _x = _v17
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v16.frame_id = str[start:end].decode('utf-8')
        else:
          _v16.frame_id = str[start:end]
        _x = _v15
        start = end
        end += 8
        (_x.height, _x.width,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v15.encoding = str[start:end].decode('utf-8')
        else:
          _v15.encoding = str[start:end]
        _x = _v15
        start = end
        end += 5
        (_x.is_bigendian, _x.step,) = _get_struct_BI().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        _v15.data = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.matches = []
        for i in range(0, length):
          val2 = front_end.msg.cvMatch()
          _x = val2
          start = end
          end += 16
          (_x.queryIdx, _x.trainIdx, _x.imgIdx, _x.distance,) = _get_struct_3If().unpack(str[start:end])
          val1.matches.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.proc = []
        for i in range(0, length):
          val2 = front_end.msg.ProcTime()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.label = str[start:end].decode('utf-8')
          else:
            val2.label = str[start:end]
          start = end
          end += 8
          (val2.seconds,) = _get_struct_d().unpack(str[start:end])
          val1.proc.append(val2)
        self.state.msgs.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.state.tracks = []
      for i in range(0, length):
        val1 = front_end.msg.interFrameTracks()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.tracks = []
        for i in range(0, length):
          val2 = front_end.msg.cvMatch()
          _x = val2
          start = end
          end += 16
          (_x.queryIdx, _x.trainIdx, _x.imgIdx, _x.distance,) = _get_struct_3If().unpack(str[start:end])
          val1.tracks.append(val2)
        _v18 = val1.motionInliers
        _v19 = _v18.header
        start = end
        end += 4
        (_v19.seq,) = _get_struct_I().unpack(str[start:end])
        _v20 = _v19.stamp
        _x = _v20
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v19.frame_id = str[start:end].decode('utf-8')
        else:
          _v19.frame_id = str[start:end]
        _x = _v18
        start = end
        end += 8
        (_x.height, _x.width,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v18.encoding = str[start:end].decode('utf-8')
        else:
          _v18.encoding = str[start:end]
        _x = _v18
        start = end
        end += 5
        (_x.is_bigendian, _x.step,) = _get_struct_BI().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        _v18.data = str[start:end]
        self.state.tracks.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.state.motion = []
      for i in range(0, length):
        val1 = sensor_msgs.msg.Image()
        _v21 = val1.header
        start = end
        end += 4
        (_v21.seq,) = _get_struct_I().unpack(str[start:end])
        _v22 = _v21.stamp
        _x = _v22
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v21.frame_id = str[start:end].decode('utf-8')
        else:
          _v21.frame_id = str[start:end]
        _x = val1
        start = end
        end += 8
        (_x.height, _x.width,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.encoding = str[start:end].decode('utf-8')
        else:
          val1.encoding = str[start:end]
        _x = val1
        start = end
        end += 5
        (_x.is_bigendian, _x.step,) = _get_struct_BI().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1.data = str[start:end]
        self.state.motion.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.state.msgs)
      buff.write(_struct_I.pack(length))
      for val1 in self.state.msgs:
        _x = val1.detID
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.descrID
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(val1.leftFeatures)
        buff.write(_struct_I.pack(length))
        for val2 in val1.leftFeatures:
          _x = val2
          buff.write(_get_struct_5f2i().pack(_x.x, _x.y, _x.size, _x.angle, _x.response, _x.octave, _x.class_id))
        _v23 = val1.leftDescr
        _v24 = _v23.header
        buff.write(_get_struct_I().pack(_v24.seq))
        _v25 = _v24.stamp
        _x = _v25
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v24.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = _v23
        buff.write(_get_struct_2I().pack(_x.height, _x.width))
        _x = _v23.encoding
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = _v23
        buff.write(_get_struct_BI().pack(_x.is_bigendian, _x.step))
        _x = _v23.data
        length = len(_x)
        # - if encoded as a list instead, serialize as bytes instead of string
        if type(_x) in [list, tuple]:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(val1.rightFeatures)
        buff.write(_struct_I.pack(length))
        for val2 in val1.rightFeatures:
          _x = val2
          buff.write(_get_struct_5f2i().pack(_x.x, _x.y, _x.size, _x.angle, _x.response, _x.octave, _x.class_id))
        _v26 = val1.rightDescr
        _v27 = _v26.header
        buff.write(_get_struct_I().pack(_v27.seq))
        _v28 = _v27.stamp
        _x = _v28
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v27.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = _v26
        buff.write(_get_struct_2I().pack(_x.height, _x.width))
        _x = _v26.encoding
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = _v26
        buff.write(_get_struct_BI().pack(_x.is_bigendian, _x.step))
        _x = _v26.data
        length = len(_x)
        # - if encoded as a list instead, serialize as bytes instead of string
        if type(_x) in [list, tuple]:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(val1.matches)
        buff.write(_struct_I.pack(length))
        for val2 in val1.matches:
          _x = val2
          buff.write(_get_struct_3If().pack(_x.queryIdx, _x.trainIdx, _x.imgIdx, _x.distance))
        length = len(val1.proc)
        buff.write(_struct_I.pack(length))
        for val2 in val1.proc:
          _x = val2.label
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          buff.write(_get_struct_d().pack(val2.seconds))
      length = len(self.state.tracks)
      buff.write(_struct_I.pack(length))
      for val1 in self.state.tracks:
        length = len(val1.tracks)
        buff.write(_struct_I.pack(length))
        for val2 in val1.tracks:
          _x = val2
          buff.write(_get_struct_3If().pack(_x.queryIdx, _x.trainIdx, _x.imgIdx, _x.distance))
        _v29 = val1.motionInliers
        _v30 = _v29.header
        buff.write(_get_struct_I().pack(_v30.seq))
        _v31 = _v30.stamp
        _x = _v31
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v30.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = _v29
        buff.write(_get_struct_2I().pack(_x.height, _x.width))
        _x = _v29.encoding
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = _v29
        buff.write(_get_struct_BI().pack(_x.is_bigendian, _x.step))
        _x = _v29.data
        length = len(_x)
        # - if encoded as a list instead, serialize as bytes instead of string
        if type(_x) in [list, tuple]:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.state.motion)
      buff.write(_struct_I.pack(length))
      for val1 in self.state.motion:
        _v32 = val1.header
        buff.write(_get_struct_I().pack(_v32.seq))
        _v33 = _v32.stamp
        _x = _v33
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v32.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_get_struct_2I().pack(_x.height, _x.width))
        _x = val1.encoding
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_get_struct_BI().pack(_x.is_bigendian, _x.step))
        _x = val1.data
        length = len(_x)
        # - if encoded as a list instead, serialize as bytes instead of string
        if type(_x) in [list, tuple]:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.state is None:
        self.state = front_end.msg.windowStatus()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.state.msgs = []
      for i in range(0, length):
        val1 = front_end.msg.stereoLandmarks()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.detID = str[start:end].decode('utf-8')
        else:
          val1.detID = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.descrID = str[start:end].decode('utf-8')
        else:
          val1.descrID = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.leftFeatures = []
        for i in range(0, length):
          val2 = front_end.msg.kPoint()
          _x = val2
          start = end
          end += 28
          (_x.x, _x.y, _x.size, _x.angle, _x.response, _x.octave, _x.class_id,) = _get_struct_5f2i().unpack(str[start:end])
          val1.leftFeatures.append(val2)
        _v34 = val1.leftDescr
        _v35 = _v34.header
        start = end
        end += 4
        (_v35.seq,) = _get_struct_I().unpack(str[start:end])
        _v36 = _v35.stamp
        _x = _v36
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v35.frame_id = str[start:end].decode('utf-8')
        else:
          _v35.frame_id = str[start:end]
        _x = _v34
        start = end
        end += 8
        (_x.height, _x.width,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v34.encoding = str[start:end].decode('utf-8')
        else:
          _v34.encoding = str[start:end]
        _x = _v34
        start = end
        end += 5
        (_x.is_bigendian, _x.step,) = _get_struct_BI().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        _v34.data = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.rightFeatures = []
        for i in range(0, length):
          val2 = front_end.msg.kPoint()
          _x = val2
          start = end
          end += 28
          (_x.x, _x.y, _x.size, _x.angle, _x.response, _x.octave, _x.class_id,) = _get_struct_5f2i().unpack(str[start:end])
          val1.rightFeatures.append(val2)
        _v37 = val1.rightDescr
        _v38 = _v37.header
        start = end
        end += 4
        (_v38.seq,) = _get_struct_I().unpack(str[start:end])
        _v39 = _v38.stamp
        _x = _v39
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v38.frame_id = str[start:end].decode('utf-8')
        else:
          _v38.frame_id = str[start:end]
        _x = _v37
        start = end
        end += 8
        (_x.height, _x.width,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v37.encoding = str[start:end].decode('utf-8')
        else:
          _v37.encoding = str[start:end]
        _x = _v37
        start = end
        end += 5
        (_x.is_bigendian, _x.step,) = _get_struct_BI().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        _v37.data = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.matches = []
        for i in range(0, length):
          val2 = front_end.msg.cvMatch()
          _x = val2
          start = end
          end += 16
          (_x.queryIdx, _x.trainIdx, _x.imgIdx, _x.distance,) = _get_struct_3If().unpack(str[start:end])
          val1.matches.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.proc = []
        for i in range(0, length):
          val2 = front_end.msg.ProcTime()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.label = str[start:end].decode('utf-8')
          else:
            val2.label = str[start:end]
          start = end
          end += 8
          (val2.seconds,) = _get_struct_d().unpack(str[start:end])
          val1.proc.append(val2)
        self.state.msgs.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.state.tracks = []
      for i in range(0, length):
        val1 = front_end.msg.interFrameTracks()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.tracks = []
        for i in range(0, length):
          val2 = front_end.msg.cvMatch()
          _x = val2
          start = end
          end += 16
          (_x.queryIdx, _x.trainIdx, _x.imgIdx, _x.distance,) = _get_struct_3If().unpack(str[start:end])
          val1.tracks.append(val2)
        _v40 = val1.motionInliers
        _v41 = _v40.header
        start = end
        end += 4
        (_v41.seq,) = _get_struct_I().unpack(str[start:end])
        _v42 = _v41.stamp
        _x = _v42
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v41.frame_id = str[start:end].decode('utf-8')
        else:
          _v41.frame_id = str[start:end]
        _x = _v40
        start = end
        end += 8
        (_x.height, _x.width,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v40.encoding = str[start:end].decode('utf-8')
        else:
          _v40.encoding = str[start:end]
        _x = _v40
        start = end
        end += 5
        (_x.is_bigendian, _x.step,) = _get_struct_BI().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        _v40.data = str[start:end]
        self.state.tracks.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.state.motion = []
      for i in range(0, length):
        val1 = sensor_msgs.msg.Image()
        _v43 = val1.header
        start = end
        end += 4
        (_v43.seq,) = _get_struct_I().unpack(str[start:end])
        _v44 = _v43.stamp
        _x = _v44
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v43.frame_id = str[start:end].decode('utf-8')
        else:
          _v43.frame_id = str[start:end]
        _x = val1
        start = end
        end += 8
        (_x.height, _x.width,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.encoding = str[start:end].decode('utf-8')
        else:
          val1.encoding = str[start:end]
        _x = val1
        start = end
        end += 5
        (_x.is_bigendian, _x.step,) = _get_struct_BI().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1.data = str[start:end]
        self.state.motion.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
_struct_5f2i = None
def _get_struct_5f2i():
    global _struct_5f2i
    if _struct_5f2i is None:
        _struct_5f2i = struct.Struct("<5f2i")
    return _struct_5f2i
_struct_BI = None
def _get_struct_BI():
    global _struct_BI
    if _struct_BI is None:
        _struct_BI = struct.Struct("<BI")
    return _struct_BI
_struct_3If = None
def _get_struct_3If():
    global _struct_3If
    if _struct_3If is None:
        _struct_3If = struct.Struct("<3If")
    return _struct_3If
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
class windowMatching(object):
  _type          = 'front_end/windowMatching'
  _md5sum = '470c2089accb6822fcb69d05c9fefb39'
  _request_class  = windowMatchingRequest
  _response_class = windowMatchingResponse
