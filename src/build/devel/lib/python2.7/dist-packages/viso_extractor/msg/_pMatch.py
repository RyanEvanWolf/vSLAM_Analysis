# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from viso_extractor/pMatch.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class pMatch(genpy.Message):
  _md5sum = "83f4f899dee21ad25ff19f486f6fe1c6"
  _type = "viso_extractor/pMatch"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """std_msgs/Float32 u1p
std_msgs/Float32 v1p
std_msgs/Int32 i1p
std_msgs/Float32 u2p
std_msgs/Float32 v2p
std_msgs/Int32 i2p
std_msgs/Float32 u1c
std_msgs/Float32 v1c
std_msgs/Int32 i1c
std_msgs/Float32 u2c
std_msgs/Float32 v2c
std_msgs/Int32 i2c

================================================================================
MSG: std_msgs/Float32
float32 data
================================================================================
MSG: std_msgs/Int32
int32 data"""
  __slots__ = ['u1p','v1p','i1p','u2p','v2p','i2p','u1c','v1c','i1c','u2c','v2c','i2c']
  _slot_types = ['std_msgs/Float32','std_msgs/Float32','std_msgs/Int32','std_msgs/Float32','std_msgs/Float32','std_msgs/Int32','std_msgs/Float32','std_msgs/Float32','std_msgs/Int32','std_msgs/Float32','std_msgs/Float32','std_msgs/Int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       u1p,v1p,i1p,u2p,v2p,i2p,u1c,v1c,i1c,u2c,v2c,i2c

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(pMatch, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.u1p is None:
        self.u1p = std_msgs.msg.Float32()
      if self.v1p is None:
        self.v1p = std_msgs.msg.Float32()
      if self.i1p is None:
        self.i1p = std_msgs.msg.Int32()
      if self.u2p is None:
        self.u2p = std_msgs.msg.Float32()
      if self.v2p is None:
        self.v2p = std_msgs.msg.Float32()
      if self.i2p is None:
        self.i2p = std_msgs.msg.Int32()
      if self.u1c is None:
        self.u1c = std_msgs.msg.Float32()
      if self.v1c is None:
        self.v1c = std_msgs.msg.Float32()
      if self.i1c is None:
        self.i1c = std_msgs.msg.Int32()
      if self.u2c is None:
        self.u2c = std_msgs.msg.Float32()
      if self.v2c is None:
        self.v2c = std_msgs.msg.Float32()
      if self.i2c is None:
        self.i2c = std_msgs.msg.Int32()
    else:
      self.u1p = std_msgs.msg.Float32()
      self.v1p = std_msgs.msg.Float32()
      self.i1p = std_msgs.msg.Int32()
      self.u2p = std_msgs.msg.Float32()
      self.v2p = std_msgs.msg.Float32()
      self.i2p = std_msgs.msg.Int32()
      self.u1c = std_msgs.msg.Float32()
      self.v1c = std_msgs.msg.Float32()
      self.i1c = std_msgs.msg.Int32()
      self.u2c = std_msgs.msg.Float32()
      self.v2c = std_msgs.msg.Float32()
      self.i2c = std_msgs.msg.Int32()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2fi2fi2fi2fi().pack(_x.u1p.data, _x.v1p.data, _x.i1p.data, _x.u2p.data, _x.v2p.data, _x.i2p.data, _x.u1c.data, _x.v1c.data, _x.i1c.data, _x.u2c.data, _x.v2c.data, _x.i2c.data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.u1p is None:
        self.u1p = std_msgs.msg.Float32()
      if self.v1p is None:
        self.v1p = std_msgs.msg.Float32()
      if self.i1p is None:
        self.i1p = std_msgs.msg.Int32()
      if self.u2p is None:
        self.u2p = std_msgs.msg.Float32()
      if self.v2p is None:
        self.v2p = std_msgs.msg.Float32()
      if self.i2p is None:
        self.i2p = std_msgs.msg.Int32()
      if self.u1c is None:
        self.u1c = std_msgs.msg.Float32()
      if self.v1c is None:
        self.v1c = std_msgs.msg.Float32()
      if self.i1c is None:
        self.i1c = std_msgs.msg.Int32()
      if self.u2c is None:
        self.u2c = std_msgs.msg.Float32()
      if self.v2c is None:
        self.v2c = std_msgs.msg.Float32()
      if self.i2c is None:
        self.i2c = std_msgs.msg.Int32()
      end = 0
      _x = self
      start = end
      end += 48
      (_x.u1p.data, _x.v1p.data, _x.i1p.data, _x.u2p.data, _x.v2p.data, _x.i2p.data, _x.u1c.data, _x.v1c.data, _x.i1c.data, _x.u2c.data, _x.v2c.data, _x.i2c.data,) = _get_struct_2fi2fi2fi2fi().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2fi2fi2fi2fi().pack(_x.u1p.data, _x.v1p.data, _x.i1p.data, _x.u2p.data, _x.v2p.data, _x.i2p.data, _x.u1c.data, _x.v1c.data, _x.i1c.data, _x.u2c.data, _x.v2c.data, _x.i2c.data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.u1p is None:
        self.u1p = std_msgs.msg.Float32()
      if self.v1p is None:
        self.v1p = std_msgs.msg.Float32()
      if self.i1p is None:
        self.i1p = std_msgs.msg.Int32()
      if self.u2p is None:
        self.u2p = std_msgs.msg.Float32()
      if self.v2p is None:
        self.v2p = std_msgs.msg.Float32()
      if self.i2p is None:
        self.i2p = std_msgs.msg.Int32()
      if self.u1c is None:
        self.u1c = std_msgs.msg.Float32()
      if self.v1c is None:
        self.v1c = std_msgs.msg.Float32()
      if self.i1c is None:
        self.i1c = std_msgs.msg.Int32()
      if self.u2c is None:
        self.u2c = std_msgs.msg.Float32()
      if self.v2c is None:
        self.v2c = std_msgs.msg.Float32()
      if self.i2c is None:
        self.i2c = std_msgs.msg.Int32()
      end = 0
      _x = self
      start = end
      end += 48
      (_x.u1p.data, _x.v1p.data, _x.i1p.data, _x.u2p.data, _x.v2p.data, _x.i2p.data, _x.u1c.data, _x.v1c.data, _x.i1c.data, _x.u2c.data, _x.v2c.data, _x.i2c.data,) = _get_struct_2fi2fi2fi2fi().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2fi2fi2fi2fi = None
def _get_struct_2fi2fi2fi2fi():
    global _struct_2fi2fi2fi2fi
    if _struct_2fi2fi2fi2fi is None:
        _struct_2fi2fi2fi2fi = struct.Struct("<2fi2fi2fi2fi")
    return _struct_2fi2fi2fi2fi
