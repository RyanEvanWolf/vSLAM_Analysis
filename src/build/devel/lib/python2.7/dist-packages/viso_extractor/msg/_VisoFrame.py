# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from viso_extractor/VisoFrame.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import viso_extractor.msg
import std_msgs.msg

class VisoFrame(genpy.Message):
  _md5sum = "9fdd3a9666d1c582d73af55ae13305e2"
  _type = "viso_extractor/VisoFrame"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """ std_msgs/Float32 nMatches
 std_msgs/Float32 nInliers
 std_msgs/Int32 time
 float64[] homography
 viso_extractor/pMatch[] matches
 bool success
================================================================================
MSG: std_msgs/Float32
float32 data
================================================================================
MSG: std_msgs/Int32
int32 data
================================================================================
MSG: viso_extractor/pMatch
std_msgs/Float32 u1p
std_msgs/Float32 v1p
std_msgs/Int32 i1p
std_msgs/Float32 u2p
std_msgs/Float32 v2p
std_msgs/Int32 i2p
std_msgs/Float32 u1c
std_msgs/Float32 v1c
std_msgs/Int32 i1c
std_msgs/Float32 u2c
std_msgs/Float32 v2c
std_msgs/Int32 i2c
"""
  __slots__ = ['nMatches','nInliers','time','homography','matches','success']
  _slot_types = ['std_msgs/Float32','std_msgs/Float32','std_msgs/Int32','float64[]','viso_extractor/pMatch[]','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       nMatches,nInliers,time,homography,matches,success

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(VisoFrame, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.nMatches is None:
        self.nMatches = std_msgs.msg.Float32()
      if self.nInliers is None:
        self.nInliers = std_msgs.msg.Float32()
      if self.time is None:
        self.time = std_msgs.msg.Int32()
      if self.homography is None:
        self.homography = []
      if self.matches is None:
        self.matches = []
      if self.success is None:
        self.success = False
    else:
      self.nMatches = std_msgs.msg.Float32()
      self.nInliers = std_msgs.msg.Float32()
      self.time = std_msgs.msg.Int32()
      self.homography = []
      self.matches = []
      self.success = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2fi().pack(_x.nMatches.data, _x.nInliers.data, _x.time.data))
      length = len(self.homography)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.homography))
      length = len(self.matches)
      buff.write(_struct_I.pack(length))
      for val1 in self.matches:
        _v1 = val1.u1p
        buff.write(_get_struct_f().pack(_v1.data))
        _v2 = val1.v1p
        buff.write(_get_struct_f().pack(_v2.data))
        _v3 = val1.i1p
        buff.write(_get_struct_i().pack(_v3.data))
        _v4 = val1.u2p
        buff.write(_get_struct_f().pack(_v4.data))
        _v5 = val1.v2p
        buff.write(_get_struct_f().pack(_v5.data))
        _v6 = val1.i2p
        buff.write(_get_struct_i().pack(_v6.data))
        _v7 = val1.u1c
        buff.write(_get_struct_f().pack(_v7.data))
        _v8 = val1.v1c
        buff.write(_get_struct_f().pack(_v8.data))
        _v9 = val1.i1c
        buff.write(_get_struct_i().pack(_v9.data))
        _v10 = val1.u2c
        buff.write(_get_struct_f().pack(_v10.data))
        _v11 = val1.v2c
        buff.write(_get_struct_f().pack(_v11.data))
        _v12 = val1.i2c
        buff.write(_get_struct_i().pack(_v12.data))
      buff.write(_get_struct_B().pack(self.success))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.nMatches is None:
        self.nMatches = std_msgs.msg.Float32()
      if self.nInliers is None:
        self.nInliers = std_msgs.msg.Float32()
      if self.time is None:
        self.time = std_msgs.msg.Int32()
      if self.matches is None:
        self.matches = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.nMatches.data, _x.nInliers.data, _x.time.data,) = _get_struct_2fi().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.homography = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.matches = []
      for i in range(0, length):
        val1 = viso_extractor.msg.pMatch()
        _v13 = val1.u1p
        start = end
        end += 4
        (_v13.data,) = _get_struct_f().unpack(str[start:end])
        _v14 = val1.v1p
        start = end
        end += 4
        (_v14.data,) = _get_struct_f().unpack(str[start:end])
        _v15 = val1.i1p
        start = end
        end += 4
        (_v15.data,) = _get_struct_i().unpack(str[start:end])
        _v16 = val1.u2p
        start = end
        end += 4
        (_v16.data,) = _get_struct_f().unpack(str[start:end])
        _v17 = val1.v2p
        start = end
        end += 4
        (_v17.data,) = _get_struct_f().unpack(str[start:end])
        _v18 = val1.i2p
        start = end
        end += 4
        (_v18.data,) = _get_struct_i().unpack(str[start:end])
        _v19 = val1.u1c
        start = end
        end += 4
        (_v19.data,) = _get_struct_f().unpack(str[start:end])
        _v20 = val1.v1c
        start = end
        end += 4
        (_v20.data,) = _get_struct_f().unpack(str[start:end])
        _v21 = val1.i1c
        start = end
        end += 4
        (_v21.data,) = _get_struct_i().unpack(str[start:end])
        _v22 = val1.u2c
        start = end
        end += 4
        (_v22.data,) = _get_struct_f().unpack(str[start:end])
        _v23 = val1.v2c
        start = end
        end += 4
        (_v23.data,) = _get_struct_f().unpack(str[start:end])
        _v24 = val1.i2c
        start = end
        end += 4
        (_v24.data,) = _get_struct_i().unpack(str[start:end])
        self.matches.append(val1)
      start = end
      end += 1
      (self.success,) = _get_struct_B().unpack(str[start:end])
      self.success = bool(self.success)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2fi().pack(_x.nMatches.data, _x.nInliers.data, _x.time.data))
      length = len(self.homography)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.homography.tostring())
      length = len(self.matches)
      buff.write(_struct_I.pack(length))
      for val1 in self.matches:
        _v25 = val1.u1p
        buff.write(_get_struct_f().pack(_v25.data))
        _v26 = val1.v1p
        buff.write(_get_struct_f().pack(_v26.data))
        _v27 = val1.i1p
        buff.write(_get_struct_i().pack(_v27.data))
        _v28 = val1.u2p
        buff.write(_get_struct_f().pack(_v28.data))
        _v29 = val1.v2p
        buff.write(_get_struct_f().pack(_v29.data))
        _v30 = val1.i2p
        buff.write(_get_struct_i().pack(_v30.data))
        _v31 = val1.u1c
        buff.write(_get_struct_f().pack(_v31.data))
        _v32 = val1.v1c
        buff.write(_get_struct_f().pack(_v32.data))
        _v33 = val1.i1c
        buff.write(_get_struct_i().pack(_v33.data))
        _v34 = val1.u2c
        buff.write(_get_struct_f().pack(_v34.data))
        _v35 = val1.v2c
        buff.write(_get_struct_f().pack(_v35.data))
        _v36 = val1.i2c
        buff.write(_get_struct_i().pack(_v36.data))
      buff.write(_get_struct_B().pack(self.success))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.nMatches is None:
        self.nMatches = std_msgs.msg.Float32()
      if self.nInliers is None:
        self.nInliers = std_msgs.msg.Float32()
      if self.time is None:
        self.time = std_msgs.msg.Int32()
      if self.matches is None:
        self.matches = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.nMatches.data, _x.nInliers.data, _x.time.data,) = _get_struct_2fi().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.homography = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.matches = []
      for i in range(0, length):
        val1 = viso_extractor.msg.pMatch()
        _v37 = val1.u1p
        start = end
        end += 4
        (_v37.data,) = _get_struct_f().unpack(str[start:end])
        _v38 = val1.v1p
        start = end
        end += 4
        (_v38.data,) = _get_struct_f().unpack(str[start:end])
        _v39 = val1.i1p
        start = end
        end += 4
        (_v39.data,) = _get_struct_i().unpack(str[start:end])
        _v40 = val1.u2p
        start = end
        end += 4
        (_v40.data,) = _get_struct_f().unpack(str[start:end])
        _v41 = val1.v2p
        start = end
        end += 4
        (_v41.data,) = _get_struct_f().unpack(str[start:end])
        _v42 = val1.i2p
        start = end
        end += 4
        (_v42.data,) = _get_struct_i().unpack(str[start:end])
        _v43 = val1.u1c
        start = end
        end += 4
        (_v43.data,) = _get_struct_f().unpack(str[start:end])
        _v44 = val1.v1c
        start = end
        end += 4
        (_v44.data,) = _get_struct_f().unpack(str[start:end])
        _v45 = val1.i1c
        start = end
        end += 4
        (_v45.data,) = _get_struct_i().unpack(str[start:end])
        _v46 = val1.u2c
        start = end
        end += 4
        (_v46.data,) = _get_struct_f().unpack(str[start:end])
        _v47 = val1.v2c
        start = end
        end += 4
        (_v47.data,) = _get_struct_f().unpack(str[start:end])
        _v48 = val1.i2c
        start = end
        end += 4
        (_v48.data,) = _get_struct_i().unpack(str[start:end])
        self.matches.append(val1)
      start = end
      end += 1
      (self.success,) = _get_struct_B().unpack(str[start:end])
      self.success = bool(self.success)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
_struct_2fi = None
def _get_struct_2fi():
    global _struct_2fi
    if _struct_2fi is None:
        _struct_2fi = struct.Struct("<2fi")
    return _struct_2fi
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_f = None
def _get_struct_f():
    global _struct_f
    if _struct_f is None:
        _struct_f = struct.Struct("<f")
    return _struct_f
