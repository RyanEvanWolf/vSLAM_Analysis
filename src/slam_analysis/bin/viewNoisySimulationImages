#!/usr/bin/env python

import math
import time

import pickle

import cv2
import numpy as np
import rospy
from cv_bridge import CvBridge
from front_end.motion import *
from front_end.simulation import *
from sensor_msgs.msg import CameraInfo, Image
from tf.transformations import quaternion_from_euler, quaternion_matrix
from front_end.simulation import *
import argparse


rootDir="/media/ryan/EXTRA/output/Simulation"

d=simDirectory(rootDir)

cam,mot,nist=d.getSettings()


#print(cam)
outImage=np.zeros((cam["height"],cam["width"],3),dtype=np.uint8)

######plotideal
f=open(rootDir+"/slow_ideal/H_1.p","r")
data=pickle.load(f)
f.close()

f=open(rootDir+"/slow_noisy/15/H_1.p","r")
data2=pickle.load(f)
f.close()

for i in data["Curves"]:
    if(len(i)==3000):
        for index in i:
            cv2.circle(outImage,(int(data["Points"][index]["La"][1,0]),int(data["Points"][index]["La"][0,0]))
                        ,2,(255,0,0))
            cv2.circle(outImage,(int(data2["Points"][index]["La"][1,0]),int(data2["Points"][index]["La"][0,0]))
                        ,2,(255,0,255))
            cv2.line(outImage,(int(data["Points"][index]["La"][1,0]),int(data["Points"][index]["La"][0,0])),
                    (int(data2["Points"][index]["La"][1,0]),int(data2["Points"][index]["La"][0,0])),(255,0,0))


cv2.imshow("a",outImage)
cv2.waitKey(0)