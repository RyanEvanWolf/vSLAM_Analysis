#!/usr/bin/env python
#####ros related imports
import rospy 
import cv2
import time 
import numpy as np
from threading import Thread
import matplotlib.pyplot as plt
from tf.transformations import quaternion_from_euler,quaternion_matrix

from math import pi

from slam_analysis.display import display3D,displayAxis,display2D
from slam_analysis.display import getUnitAxis,liveGraph
from front_end.motion import createHomog,deserialHomography,getMotion

from viso_extractor.stereo import getVisoFromBag,drawVisoEpi,getVisoEpiError


import rosbag
import argparse

parser =argparse.ArgumentParser()
parser.add_argument("bagDirectory")
global args

args,unknown=parser.parse_known_args()




# A=getUnitAxis()
# Anew=np.dot(H1,A['Y'])
# Anew2=np.dot(H2,A['Y'])
global outGraph
global visoGraph
#global out2
#outGraph=display3D()
outGraph=display2D()
visoGraph=liveGraph("a")


qco=quaternion_from_euler(-pi/2.0,0.0,0)
outGraph.coordTransform=quaternion_matrix(qco)



#out2.coordTransform=quaternion_matrix(qco)

# print(A)
# print(Anew)
# print(Anew2)

# global graph
# global graph2
# graph= display3D()

# def genStraighLine(total=10):
#     tl=[]
#     for i in range(0,total):
#         t=np.zeros((3,1),np.float64)
#         t[0,0]=-0.15*i
#         t[1,0]=0.25*i
#         t[2,0]=0.5*i

#         tl.append(createHomog(T=t))
#     return tl

# def getPureRotation(total=10):
#     rl=[]
#     for i in range(0,total):
#         q=quaternion_from_euler(0,0,2*pi*i/(float(total)))
#         R=quaternion_matrix(q)
#         rl.append(createHomog(R=R[0:3,0:3]))
#     return rl




# def makeFakeMotion():
#     totalList=genStraighLine()+getPureRotation()
#     return totalList
def getLists(mot):
    r=[]
    p=[]
    y=[]
    x=[]
    yy=[]
    z=[]
    for i in mot:
        r.append[i["Roll"]]
        p.append[i["Pitch"]]
        y.append[i["Yaw"]]
        x.append[i["X"]]
        yy.append[i["Y"]]
        z.append[i["Z"]]
    return r,p,y,x,yy,z

def up():
    global outGraph
    global visoGraph
    #global out2
    global args

    visoData=getVisoFromBag(args.bagDirectory)
    unit=displayAxis(scale=0.1)
    currentPose=displayAxis(scale=0.1)
    overallPose=displayAxis(scale=0.1)
    outGraph.Q.put(("sensor",unit))
    outGraph.Q.put(("Overall",overallPose))

    cv2.namedWindow("EpiPolar",cv2.WINDOW_NORMAL)

    mot=[]

    for i in range(1,len(visoData)):
        colL=cv2.cvtColor(visoData[i]["Left"],cv2.COLOR_GRAY2RGB)
        colR=cv2.cvtColor(visoData[i]["Right"],cv2.COLOR_GRAY2RGB)
        epi=drawVisoEpi(colL,colR,visoData[i]["msg"])
        H=np.linalg.inv(deserialHomography(visoData[i]["msg"].homography))
        mot.append(getMotion(H))

        r,p,y,x,yy,zz=getLists(mot)
        visoGraph.Q.put(("pitch",range(0,len(p)),p))
        visoGraph.Q.put(("zz",range(0,len(zz)),zz))
        cv2.imshow("EpiPolar",epi)
        press=cv2.waitKey(1)
        if(press==32):
            wait=True
            while(wait):
                if(cv2.waitKey(1)==32):
                    wait=False
        while((not outGraph.Q.empty())and(not visoGraph.Q.empty())):
            time.sleep(0.1)
        # currentPose.Pose=np.linalg.inv(deserialHomography(getViso[str(i)]["H"]))
        # overallPose.Pose=overallPose.Pose.dot(currentPose.Pose)
        # outGraph.Q.put((str(i),overallPose))
        # while(not outGraph.Q.empty()):
        #     time.sleep(0.1)
    print("completed")
t=Thread(target=up)
t.daemon=True
t.start()

plt.show()
