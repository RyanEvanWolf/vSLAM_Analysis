#!/usr/bin/env python
import os
import cv2
import sys

import time

import rospy
import argparse
import pickle
import rosbag

from cv_bridge import CvBridge
from front_end.srv import *
from front_end.utils import *

from front_end.visualize import *

from front_end.stereo import Algorithms
from front_end.algorithm import loweFilterPotential

from front_end.features import detectorLookUpTable,descriptorLookUpTable,getDetector
detTable=detectorLookUpTable()
descTable=descriptorLookUpTable()
from front_end.features import getDescriptor,getDescriptorIDs,getMatcher
from dataset.utils import Directories,unpackBag
from sensor_msgs.msg import Image,CameraInfo
import matplotlib.pyplot as plt
from front_end.analysis import getStereoFrameStatistics,getWindowStateStatistics
from front_end.visualize import genStereoscopicImage 
cvb=CvBridge()





parser =argparse.ArgumentParser()
parser.add_argument("rootDir")
parser.add_argument("loopID")
parser.add_argument("detectorName")
parser.add_argument("descriptorName")
parser.add_argument("CurveID")
parser.add_argument("--output_directory",default="/media/ryan/EXTRA/output")
parser.add_argument("--max_images",type=int,default=-1)
args,unknown=parser.parse_known_args()


projectFolder=Directories(args.rootDir,args.output_directory) 

pickleDir=projectFolder.getCurvePickle(args.loopID)

print("loading Data from "+pickleDir)
inputPickle=open(pickleDir,"rb")
dataIn=pickle.load(inputPickle)
inputPickle.close()
print("Data Loaded")

rospy.init_node('extract_stereo')

Q=cvb.imgmsg_to_cv2(rospy.wait_for_message("/bumblebee_configuration/Q",Image))
leftInfo=rospy.wait_for_message("/bumblebee_configuration/idealLeft/CameraInfo",CameraInfo)
rightInfo=leftInfo=rospy.wait_for_message("/bumblebee_configuration/idealRight/CameraInfo",CameraInfo)

Bag=unpackBag(projectFolder.getBagPath(args.loopID),args.max_images)

print("Waiting for services")
####establish service connections
stereoServiceName="feature_node/getStereoFeatures"
stereoMatchServiceName="stereo_node/stereoMatching"
windowServiceName="window_node/windowMatching"

rospy.wait_for_service(stereoServiceName)
rospy.wait_for_service(stereoMatchServiceName)
rospy.wait_for_service(windowServiceName)
print("services Found")

stereoService=rospy.ServiceProxy(stereoServiceName,getStereoFeatures)
matchService=rospy.ServiceProxy(stereoMatchServiceName,stereoMatching)
windowService=rospy.ServiceProxy(windowServiceName,windowMatching)

windowRE=windowMatchingRequest()
windowRE.reset=True
windowService(windowRE)

# Results={}
# Results["LoopID"]=args.loopID
# Results["CurveID"]=args.CurveID
# Results["ImageStatistics"]=[]
cv2.namedWindow("Tracks",cv2.WINDOW_NORMAL)
cv2.namedWindow("Init",cv2.WINDOW_NORMAL)
descriptorIds=getDescriptorIDs(args.descriptorName)
for f in range(0,len(Bag["Left"])):
    ###for each image, extract the output data, and save to Results
    ###get KPS
    # ImageResults={}
    # ImageResults["FrameNumber"]=f
    # ImageResults["AlgorithmStatistics"]=[]
    # ImageResults["DetectorID"]=dataIn[args.detectorName][args.CurveID][f]
    desID=descriptorIds[0]##just pick the first one for now


    print(f,len(Bag["Left"]))
    request=getStereoFeaturesRequest()
    request.detID=dataIn[args.detectorName][args.CurveID][f]
    request.descrID=desID
    request.leftImg=Bag["Left"][f]
    request.rightImg=Bag["Right"][f]
    ans=stereoService(request)
    #### get Stereo
    stereoRe=stereoMatchingRequest()
    stereoRe.frame=ans.latestFeatures
    steAns=matchService(stereoRe)
    print("received stereoMatching Results")
    #print(getStereoFrameStatistics(ans.latestFeatures,steAns.out))
    print("STARTING WINDOW")
    windowRE=windowMatchingRequest()
    windowRE.reset=False
    windowRE.latestFrame=steAns.out
    windowOut=windowService(windowRE)
    if(len(windowOut.state.msgs)>1):

        ####DEBUG####
        ##########################################
        ###view initial Matches
        currentImage=cvb.imgmsg_to_cv2(Bag["Left"][f])
        currentRightImage=cvb.imgmsg_to_cv2(Bag["Right"][f])
        previousImage= cvb.imgmsg_to_cv2(Bag["Left"][f-1])


        currentKP=unpackKP(windowOut.state.msgs[-1].leftFeatures)
        previousKP=unpackKP(windowOut.state.msgs[-2].leftFeatures)
        currentDescriptors=cvb.imgmsg_to_cv2(windowOut.state.msgs[-1].leftDescr)
        previousDescriptors=cvb.imgmsg_to_cv2(windowOut.state.msgs[-2].leftDescr)
        #print(currentDescriptors.shape,previousDescriptors.shape)
        matcher=getMatcher(descTable[windowOut.state.msgs[-1].descrID]["NormType"])
        ####unpack descriptors
        ###left Descriptors
        ans=matcher.knnMatch(currentDescriptors,previousDescriptors,5)

        initialMatches=loweFilterPotential(ans)

        tcKP=np.zeros((len(initialMatches),2),dtype=np.float64)
        tpKP=np.zeros((len(initialMatches),2),dtype=np.float64)

# def getNister(currentLandmarks,previousLandmarks,matches,K):
#     currentKP=np.zeros((len(matches),2),dtype=np.float64)
#     previousKP=np.zeros((len(matches),2),dtype=np.float64)
#     print(len(matches),len(currentLandmarks.leftFeatures),len(previousLandmarks.leftFeatures))
#     for i in range(0,len(matches)):
#         currentKP[i,0]=ros2cv_KP(currentLandmarks.leftFeatures[matches[i].queryIdx]).pt[0]
#         currentKP[i,1]=ros2cv_KP(currentLandmarks.leftFeatures[matches[i].queryIdx]).pt[1]
#         previousKP[i,0]=ros2cv_KP(previousLandmarks.leftFeatures[matches[i].trainIdx]).pt[0]
#         previousKP[i,1]=ros2cv_KP(previousLandmarks.leftFeatures[matches[i].trainIdx]).pt[1]
#     print(currentKP.shape,previousKP.shape)
#     E,mask=cv2.findEssentialMat(currentKP,previousKP,K[0,0],(K[0:2,2][0],K[0:2,2][1]),threshold=2)
#     #r1,r2,t=cv2.decomposeEssentialMat(E)
#     nInliers,R,T,matchMask=cv2.recoverPose(E,currentKP,previousKP,K,mask)
#     ###cheirality check
#     indexes=[]
#     for i in range(0,matchMask):
#         if(matchMask[i]>0):
#             indexes.append(i)
#     print(indexes)
#     print("Nister",nInliers)
#     ###scale
#     ###make homography
#     return createHomog(R,T),matchMask




        initial=genStereoscopicImage(currentImage,previousImage)
        initial=drawFrameTracks(initial,currentKP,previousKP,initialMatches)
        cv2.imshow("Init",initial)
        #################################################
        #################################################
        #################################################
        print(len(windowOut.state.msgs))
        print(getWindowStateStatistics(windowOut.state,leftInfo,rightInfo,Q))
        tracks=genStereoscopicImage(currentImage,previousImage)
        
        #tracks=drawFrameTracks(tracks)
        currentKP=unpackKP(windowOut.state.msgs[-1].leftFeatures)
        prevKP=unpackKP(windowOut.state.msgs[-2].leftFeatures)
        mask=cvb.imgmsg_to_cv2(windowOut.state.tracks[0].motionInliers)
        inlierMatches=[]
        print(mask.shape)
        for i in range(0,mask.shape[1]):
            #print
            if(mask[0,i]>0):
                inlierMatches.append(ros2cv_dmatch(windowOut.state.tracks[0].tracks[i]))
        tracks=drawFrameTracks(tracks,currentKP,prevKP,inlierMatches)
        cv2.imshow("Tracks",tracks)
        print(f)
        cv2.waitKey(1000)
    #l=drawStereoLandmarks(Bag["Left"][f],Bag["Right"][f],
    #steAns)
    #cv2.imshow("epi",l)
    #cv2.waitKey(2000)
    #print(getStereoFrameStatistics(ans.latestFeatures,steAns.out))
    #ImageResults["AlgorithmStatistics"].append(getStereoFrameStatistics(ans.latestFeatures,steAns.out))
    #Results["ImageStatistics"].append(ImageResults)


#save to File 
# outputName=projectFolder.getAlgorithmStatsPickle(args.loopID)
# outFile=open(outputName,"w")
# print("outFile",outputName)
# pickle.dump(Results,outFile)
# outFile.close()
print("completed")
 
