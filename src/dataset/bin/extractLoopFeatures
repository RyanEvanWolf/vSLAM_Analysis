#!/usr/bin/env python
#####ros related imports
import rospy 
from front_end.srv import singleImageDetection,singleImageDetectionRequest
from front_end.features import detectorLookUpTable
from dataset.utils import Directories,getBagID,unpackBag
from cv_bridge import CvBridge
import os
import cv2
import sys
from front_end.features import *
import time
import pickle

import argparse

import rosbag

cvb=CvBridge()

parser =argparse.ArgumentParser()
parser.add_argument("rootDir")
parser.add_argument("loopID")
parser.add_argument("--max_images",default=-1,type=int)
parser.add_argument("--output_directory",default="/media/ryan/EXTRA/output")
args,unknown=parser.parse_known_args()

projectFolder=Directories(args.rootDir,args.output_directory) 
sequenceData=unpackBag(projectFolder.getBagPath(args.loopID),args.max_images)
table=detectorLookUpTable()
#####
#pick detector based on input 


newRequest=singleImageDetectionRequest()
###get detector Settings
newRequest.returnKP=False
newRequest.detID=table.keys()

serviceName="feature_node/singleImageDetection"
rospy.init_node('extract_loop_features')

rospy.wait_for_service(serviceName)
serv=rospy.ServiceProxy(serviceName,singleImageDetection)
results=[]

for f in range(0,len(sequenceData["Left"])):
    newRequest.leftImg=sequenceData["Left"][f]
    newRequest.rightImg=sequenceData["Right"][f]
    ans=serv(newRequest)
    
    results.append(ans)
    print("-----"+str(f)+"/"+str(len(sequenceData["Left"])))



print(projectFolder.getFeaturePickle(args.loopID))


fileName=projectFolder.getFeaturePickle(args.loopID)
if(not os.path.exists(os.path.dirname(fileName))):
    os.makedirs(os.path.dirname(fileName))
outFile=open(fileName,"wb")
print("outFile",fileName)
pickle.dump(results,outFile)
outFile.close()
print("completed")