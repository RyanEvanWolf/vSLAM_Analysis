#!/usr/bin/env python
import os
import cv2
import sys

import time

import rospy
import argparse
import pickle
import rosbag

from cv_bridge import CvBridge
from front_end.srv import stereoMatching,stereoMatchingResponse,stereoMatchingRequest
from front_end.srv import getStereoFeatures,getStereoFeaturesRequest,getStereoFeaturesResponse
from front_end.srv import singleImageDetection,singleImageDetectionRequest,singleImageDetectionResponse
from front_end.utils import *

from front_end.visualize import *

from front_end.stereo import Algorithms

from front_end.features import detectorLookUpTable,descriptorLookUpTable,getDetector
detTable=detectorLookUpTable()
descTable=descriptorLookUpTable()
from front_end.features import getDescriptor
from dataset.utils import Directories,unpackBag

import matplotlib.pyplot as plt
from front_end.analysis import getStereoFrameStatistics

cvb=CvBridge()

parser =argparse.ArgumentParser()
parser.add_argument("rootDir")
parser.add_argument("loopID")
parser.add_argument("detectorName")
parser.add_argument("CurveID")
parser.add_argument("--output_directory",default="/media/ryan/EXTRA/output")
args,unknown=parser.parse_known_args()


projectFolder=Directories(args.rootDir,args.output_directory) 

pickleDir=projectFolder.getCurvePickle(args.loopID)

print("loading Data from "+pickleDir)
inputPickle=open(pickleDir,"rb")
dataIn=pickle.load(inputPickle)
inputPickle.close()
print("Data Loaded")

rospy.init_node('extract_stereo')

Bag=unpackBag(projectFolder.getBagPath(args.loopID),5)

print("Waiting for services")
####establish service connections
stereoServiceName="feature_node/getStereoFeatures"
stereoMatchServiceName="stereo_node/stereoMatching"

rospy.wait_for_service(stereoServiceName)
rospy.wait_for_service(stereoMatchServiceName)
print("services Found")

stereoService=rospy.ServiceProxy(stereoServiceName,getStereoFeatures)
matchService=rospy.ServiceProxy(stereoMatchServiceName,stereoMatching)

Results={}
Results["LoopID"]=args.loopID
Results["CurveID"]=args.CurveID
Results["ImageStatistics"]=[]

for f in range(0,len(Bag["Left"])):
    ###for each image, extract the output data, and save to Results
    ###get KPS
    ImageResults={}
    ImageResults["FrameNumber"]=f
    ImageResults["AlgorithmStatistics"]=[]
    ImageResults["DetectorID"]=dataIn[args.detectorName][args.CurveID][f]
    descr=0
    for descType in descTable.keys():
        print(descr,len(descTable.keys()),f,len(Bag["Left"]))
        descr+=1
        descriptorResults={}
        descriptorResults["DescriptorID"]=descType
        print(descType)
        request=getStereoFeaturesRequest()
        request.detID=ImageResults["DetectorID"]
        request.descrID=descType
        request.leftImg=Bag["Left"][f]
        request.rightImg=Bag["Right"][f]
        ans=stereoService(request)
        #### get Stereo
        stereoRe=stereoMatchingRequest()
        stereoRe.frame=ans.latestFeatures
        steAns=matchService(stereoRe)
        print("received stereoMatching Results")
        #l=drawStereoLandmarks(Bag["Left"][f],Bag["Right"][f],
        #steAns)
        #cv2.imshow("epi",l)
        #cv2.waitKey(2000)
        print(getStereoFrameStatistics(ans.latestFeatures,steAns.out))
        ImageResults["AlgorithmStatistics"].append(getStereoFrameStatistics(ans.latestFeatures,steAns.out))
    Results["ImageStatistics"].append(ImageResults)
    # ##define the Requests
    # kpRequest=singleImageDetectionRequest()
    # kpRequest.detectorName=dataIn["name"]
    # kpRequest.returnKP=True

    # kpRequest.leftImg=leftImages[f]
    # kpRequest.rightImg=rightImages[f]
    # kpRequest.det_attrib.append(dataIn["operatingCurves"][args.key][f])
    # ans=kpService(kpRequest)
    # # ###get descriptors
    # print("getting Descriptors")
    # descriptorRequest=singleImageDescriptionRequest()

    # descriptorRequest.leftImg=leftImages[f]
    # descriptorRequest.rightImg=rightImages[f]
    # descriptorRequest.leftFeatures=ans.outputFrames[0].leftFeatures
    # descriptorRequest.rightFeatures=ans.outputFrames[0].rightFeatures
    # ans2=descriptorService(descriptorRequest)
    # print("startingStereo")
    # stereoReq=singleStereoRequest()
    # stereoReq.leftFeatures=descriptorRequest.leftFeatures
    # stereoReq.rightFeatures=descriptorRequest.rightFeatures
    # stereoReq.descriptors=ans2.results
    # stereoReq.inputSettings.append(Algorithms[0])

    # ans3=stereoService(stereoReq)
    # print("endReq")
    # print(f)

#save to File 
outputName=projectFolder.getAlgorithmStatsPickle(args.loopID)
outFile=open(outputName,"w")
print("outFile",outputName)
pickle.dump(Results,outFile)
outFile.close()
print("completed")
 
